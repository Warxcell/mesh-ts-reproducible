schema {
  query: Query
  mutation: Mutation
}

directive @oneOf on INPUT_OBJECT

directive @isGranted(role: String!) on FIELD_DEFINITION

type RecommendedRingSize {
  id: ID!
  label(region: RegionCode!, locale: Locale!): String!
  ringSize: RingSize!
}

type RingSize {
  id: ID!
  label(region: RegionCode!): String
}

input RingSizeInput {
  ringSizeId: ID
  recommendedRingSizeId: ID
}

union RingSizeOrRecommendedRingSize = RingSize | RecommendedRingSize

enum BookingConsultationPurposeCode {
  ENGAGEMENT_RING
  RESIZE
  COLLECTION
  WEDDING_RING
  INSPECTION
  REPAIR
  FULL_SERVICE
  OTHER
  QUICK_COLLECTION
}

type BookingConsultationPurpose {
  id: ID! @deprecated(reason: "systemCode")
  systemCode: BookingConsultationPurposeCode!
  name: String!
  type: BookingConsultationType!
  methods: [BookingConsultationMethod!]!
  icon: Asset
  """Duration in minutes"""
  duration: Int!
  requireConsultant: Boolean!
  slotLengthInMinutes: Int!
  takesRoom: Boolean!
}

enum BookingConsultationTypeCode {
  SALES
  AFTERCARE
  COLLECTION
}

type BookingConsultationType {
  systemCode: BookingConsultationTypeCode!
  name: String
}

enum BookingConsultationMethodCode {
  IN_PERSON
  BY_PHONE
  VIRTUAL
}

type BookingConsultationMethod {
  systemCode: BookingConsultationMethodCode!
  name: String!
  icon: Asset
  id: ID! @deprecated(reason: "systemCode")
  takesRoom: Boolean!
  isVirtual: Boolean!
}

enum BookingConsultationComplexityCode {
  VIEW_DESIGNS
  DISCUSS_DESIGNS
  NOT_SURE
}

type BookingConsultationComplexity {
  systemCode: BookingConsultationComplexityCode!
  translation(locale: Locale!): BookingConsultationComplexityTranslation!
  icon: Asset
}

type BookingConsultationComplexityTranslation {
  locale: Locale!
  name: String!
}

input BookingCancelConsultationInput {
  id: ID!
}

type BookingConsultationSlotsResponse {
  slots: [BookingConsultationSlot!]!
}

type BookingConsultationSlot {
  showroom: Showroom!
  startTime: DateTime!
}

input BookingConsultationSlotInput {
  purpose: BookingConsultationPurposeCode!
  method: BookingConsultationMethodCode!
  consultant: BookingSystemConsultant!
  region: RegionCode!
  order: ID
}

union BookingCreateConsultationNewCustomerResponse = BookingCreateConsultationSuccessNewCustomer | BookingCreateConsultationErrorNoAvailableConsultants

union BookingCreateConsultationExistingCustomerResponse = BookingCreateConsultationSuccessExistingCustomer | BookingCreateConsultationErrorNoAvailableConsultants

type BookingCreateConsultationSuccessNewCustomer {
  customerRegistrationResponse: CustomerRegistrationResponse!
  consultation: BookingConsultation!
}

type BookingCreateConsultationSuccessExistingCustomer {
  consultation: BookingConsultation!
}

type BookingCreateConsultationErrorNoAvailableConsultants {
  message(locale: Locale!): String!
}

enum BookingSystemConsultant {
  ALL
  OWN
}

input BookingCreateConsultationInput {
  purpose: BookingConsultationPurposeCode!
  method: BookingConsultationMethodCode!
  startTime: DateTime!
  showroom: ID!
  description: String
  consultant: BookingSystemConsultant!
  """Required if purpose's type's code is SALES"""
  salesConsultation: BookingCreateConsultationSalesConsultationInput
  """Required if purpose's type's code is AFTERCARE"""
  aftercareConsultation: BookingCreateConsultationAftercareConsultationInput
  phone: PhoneNumberInput
  commissionJunction: CommissionJunctionInput
  uri: Uri!
  baseInput: EnquiryBaseInput
}

input BookingCreateConsultationSalesConsultationInput {
  complexity: BookingConsultationComplexityCode!
}

input BookingCreateConsultationAftercareConsultationInput {
  order: ID!
}

type BookingConsultation {
  id: ID!
  purpose: BookingConsultationPurpose!
  method: BookingConsultationMethod!
  description: String
  showroom: Showroom!
  startsAt: DateTime!
  isCancelled: Boolean!
  canBeCancelled: Boolean!
  customer: Customer
  consultant: Consultant
  state: BookingConsultationState!
  note: String
  salesforceId: String
  consultationRoom: BookingConsultationRoom
  order: Order
}

enum BookingConsultationRoomKind {
  CONSULTATION
  RECEPTION
}

interface BookingConsultationRoom {
  id: ID!
  name: String!
  kind: BookingConsultationRoomKind!
}

type BookingInPersonConsultationRoom implements BookingConsultationRoom {
  id: ID!
  name: String!
  kind: BookingConsultationRoomKind!
}

type BookingVirtualConsultationRoom implements BookingConsultationRoom {
  id: ID!
  name: String!
  kind: BookingConsultationRoomKind!
}

enum BookingConsultationState {
  OPEN
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum BookingConsultationTransition {
  INITIALISE
  COMPLETE
  CANCEL
  NO_SHOW
}

input BookingConsultationMutableFields {
  startTime: DateTime!
  description: String
  note: String
  consultant: ID
  showroom: ID!
  consultationRoomKind: BookingConsultationRoomKind
}

type BookingConsultationAvailableDate {
  date: DateTime!
  consultationAvailableShowrooms: [BookingConsultationAvailableShowroom!]!
}

type BookingConsultationAvailableShowroom {
  consultationSlots: [BookingConsultationSlot]
}

type CatalogueImage {
  id: ID!
  url: String!
  mimeType: String!
  sources: [ImageSrc!]!
  size(name: ImageSizeName!): ImageSize!
}

interface CatalogueJewellery implements CatalogueProduct {
  catalogueCode: ID!
  productName: String!
  suffix: String
  customTitleTag: String
  relatedProducts: [CatalogueProduct!]!
  updatedAt: DateTime
  images: [CatalogueImage!]!
  isReturnable: Boolean!
  deliveryDays: Int!
  salePrice(region: RegionCode!, currency: CurrencyInput!): SalePrice!
  primaryMetal: Metal!
  images360: [GenericImage!]!
  video: CatalogueVideo
  mainImage: GenericImage
  designStyles: [JewelleryDesignStyleLabel!]!
  designFeatures: [JewelleryDesignFeatureLabel!]!
  gemstones: [JewelleryGemstoneLabel!]!
  engravingDisabled: Boolean!
  financeOptionsAffirm(region: RegionCode!, currency: CurrencyInput!): AffirmFinanceOption
  financeOptionsKlarna(region: RegionCode!, currency: CurrencyInput!): KlarnaFinanceOption
}

type CatalogueAggregate {
  count: Int!
}

type CatalogueJewelleriesFilters {
  price(input: CatalogueFiltersPriceInput!): CataloguePriceRangeFilter!
  primaryMetals: [CatalogueFilterMetalItem!]!
  designStyles: [CatalogueFilterJewelleryDesignStyleLabel!]!
  designFeatures: [CatalogueFilterJewelleryDesignFeatureLabel!]!
  gemstones: [CatalogueFilterJewelleryGemstoneLabel!]!
}

type CatalogueJewelleriesFiltersVariation {
  primaryMetal: MetalCode
  designStyle: JewelleryDesignStyle
  designFeature: JewelleryDesignFeature
  gemstone: JewelleryGemstoneCode
}

type CatalogueJewelleriesNecklacesFiltersVariation {
  primaryMetal: MetalCode
  designStyle: JewelleryDesignStyle
  designFeature: JewelleryDesignFeature
  gemstone: JewelleryGemstoneCode
  productStyle: JewelleryNecklaceProductStyle
}

type CatalogueJewelleriesEarringsFiltersVariation {
  primaryMetal: MetalCode
  designStyle: JewelleryDesignStyle
  designFeature: JewelleryDesignFeature
  gemstone: JewelleryGemstoneCode
  productStyle: JewelleryEarringsProductStyle
}

type CatalogueJewelleriesBraceletsFiltersVariation {
  primaryMetal: MetalCode
  designStyle: JewelleryDesignStyle
  designFeature: JewelleryDesignFeature
  gemstone: JewelleryGemstoneCode
  productStyle: JewelleryBraceletProductStyle
}

type CatalogueJewelleryNecklacesFilters {
  price(input: CatalogueFiltersPriceInput!): CataloguePriceRangeFilter!
  primaryMetals: [CatalogueFilterMetalItem!]!
  designStyles: [CatalogueFilterJewelleryDesignStyleLabel!]!
  designFeatures: [CatalogueFilterJewelleryDesignFeatureLabel!]!
  productStyles: [CatalogueFilterJewelleryNecklaceProductStyleLabel!]!
  gemstones: [CatalogueFilterJewelleryGemstoneLabel!]!
}

type CatalogueJewelleryBraceletsFilters {
  price(input: CatalogueFiltersPriceInput!): CataloguePriceRangeFilter!
  primaryMetals: [CatalogueFilterMetalItem!]!
  designStyles: [CatalogueFilterJewelleryDesignStyleLabel!]!
  designFeatures: [CatalogueFilterJewelleryDesignFeatureLabel!]!
  productStyles: [CatalogueFilterJewelleryBraceletProductStyleLabel!]!
  gemstones: [CatalogueFilterJewelleryGemstoneLabel!]!
}

type CatalogueJewelleryEarringsFilters {
  price(input: CatalogueFiltersPriceInput!): CataloguePriceRangeFilter!
  primaryMetals: [CatalogueFilterMetalItem!]!
  designStyles: [CatalogueFilterJewelleryDesignStyleLabel!]!
  designFeatures: [CatalogueFilterJewelleryDesignFeatureLabel!]!
  productStyles: [CatalogueFilterJewelleryEarringsProductStyleLabel!]!
  gemstones: [CatalogueFilterJewelleryGemstoneLabel!]!
}

type CatalogueFilterJewelleryDesignStyleLabel {
  label: JewelleryDesignStyleLabel!
  totalResults: Int!
}

type CatalogueFilterJewelleryDesignFeatureLabel {
  label: JewelleryDesignFeatureLabel!
  totalResults: Int!
}

type CatalogueFilterJewelleryGemstoneLabel {
  label: JewelleryGemstoneLabel!
  totalResults: Int!
}

type CatalogueFilterJewelleryNecklaceProductStyleLabel {
  label: JewelleryNecklaceProductStyleLabel!
  totalResults: Int!
}

type CatalogueFilterJewelleryBraceletProductStyleLabel {
  label: JewelleryBraceletProductStyleLabel!
  totalResults: Int!
}

type CatalogueFilterJewelleryEarringsProductStyleLabel {
  label: JewelleryEarringsProductStyleLabel!
  totalResults: Int!
}

input CatalogueJewelleriesFilterInput {
  includeHiddenFromProductList: Boolean = false
  catalogueCode: ID
  catalogueCodes: [ID!]
  name: String
  suffix: String
  price: CatalogueFilterPriceInput
  primaryMetalCodes: [MetalCode!]
  designStyles: [JewelleryDesignStyle!]
  designFeatures: [JewelleryDesignFeature!]
  gemstones: [JewelleryGemstoneCode!]
}

input CatalogueJewelleryFilterInput {
  name: String!
  primaryMetalCode: MetalCode!
  suffix: String
}

input CatalogueJewelleriesNecklacesFilterInput {
  includeHiddenFromProductList: Boolean = false
  catalogueCode: ID
  catalogueCodes: [ID!]
  name: String
  suffix: String
  price: CatalogueFilterPriceInput
  primaryMetalCodes: [MetalCode!]
  designStyles: [JewelleryDesignStyle!]
  designFeatures: [JewelleryDesignFeature!]
  productStyles: [JewelleryNecklaceProductStyle!]
  gemstones: [JewelleryGemstoneCode!]
}

input CatalogueJewelleriesEarringsFilterInput {
  includeHiddenFromProductList: Boolean = false
  catalogueCode: ID
  catalogueCodes: [ID!]
  name: String
  suffix: String
  price: CatalogueFilterPriceInput
  primaryMetalCodes: [MetalCode!]
  designStyles: [JewelleryDesignStyle!]
  designFeatures: [JewelleryDesignFeature!]
  productStyles: [JewelleryEarringsProductStyle!]
  gemstones: [JewelleryGemstoneCode!]
}

input CatalogueJewelleriesBraceletsFilterInput {
  includeHiddenFromProductList: Boolean = false
  catalogueCode: ID
  catalogueCodes: [ID!]
  name: String
  suffix: String
  price: CatalogueFilterPriceInput
  primaryMetalCodes: [MetalCode!]
  designStyles: [JewelleryDesignStyle!]
  designFeatures: [JewelleryDesignFeature!]
  productStyles: [JewelleryBraceletProductStyle!]
  gemstones: [JewelleryGemstoneCode!]
}

type CatalogueJewelleryNecklace implements CatalogueProduct & CatalogueJewellery {
  catalogueCode: ID!
  productName: String!
  suffix: String!
  customTitleTag: String
  relatedProducts: [CatalogueJewelleryNecklace!]!
  updatedAt: DateTime
  images: [CatalogueImage!]!
  isReturnable: Boolean!
  deliveryDays: Int!
  salePrice(region: RegionCode!, currency: CurrencyInput!): SalePrice!
  primaryMetal: Metal!
  variations: [CatalogueJewelleryNecklace!]!
  images360: [GenericImage!]!
  video: CatalogueVideo
  mainImage: GenericImage
  translation(locale: Locale!): CatalogueJewelleryNecklaceTranslation!
  designStyles: [JewelleryDesignStyleLabel!]!
  designFeatures: [JewelleryDesignFeatureLabel!]!
  gemstones: [JewelleryGemstoneLabel!]!
  productStyles: [JewelleryNecklaceProductStyleLabel!]!
  engravingDisabled: Boolean!
  firstAvailableDeliveryDate(region: RegionCode!, hasEngraving: Boolean!): DeliveryDate!
  financeOptionsAffirm(region: RegionCode!, currency: CurrencyInput!): AffirmFinanceOption
  financeOptionsKlarna(region: RegionCode!, currency: CurrencyInput!): KlarnaFinanceOption
}

type CatalogueJewelleryNecklaceTranslation {
  description: String
  seoText: String
}

type CatalogueJewelleryEarrings implements CatalogueProduct & CatalogueJewellery {
  catalogueCode: ID!
  productName: String!
  suffix: String!
  customTitleTag: String
  relatedProducts: [CatalogueJewelleryEarrings!]!
  updatedAt: DateTime
  images: [CatalogueImage!]!
  isReturnable: Boolean!
  deliveryDays: Int!
  salePrice(region: RegionCode!, currency: CurrencyInput!): SalePrice!
  primaryMetal: Metal!
  variations: [CatalogueJewelleryEarrings!]!
  images360: [GenericImage!]!
  video: CatalogueVideo
  mainImage: GenericImage
  translation(locale: Locale!): CatalogueJewelleryEarringsTranslation!
  designStyles: [JewelleryDesignStyleLabel!]!
  designFeatures: [JewelleryDesignFeatureLabel!]!
  gemstones: [JewelleryGemstoneLabel!]!
  productStyles: [JewelleryEarringsProductStyleLabel!]!
  engravingDisabled: Boolean!
  firstAvailableDeliveryDate(region: RegionCode!, hasEngraving: Boolean!): DeliveryDate!
  financeOptionsAffirm(region: RegionCode!, currency: CurrencyInput!): AffirmFinanceOption
  financeOptionsKlarna(region: RegionCode!, currency: CurrencyInput!): KlarnaFinanceOption
}

type CatalogueJewelleryEarringsTranslation {
  description: String
  seoText: String
}

type CatalogueJewelleryBracelet implements CatalogueProduct & CatalogueJewellery {
  catalogueCode: ID!
  productName: String!
  suffix: String!
  customTitleTag: String
  relatedProducts: [CatalogueJewelleryBracelet!]!
  updatedAt: DateTime
  images: [CatalogueImage!]!
  isReturnable: Boolean!
  deliveryDays: Int!
  salePrice(region: RegionCode!, currency: CurrencyInput!): SalePrice!
  primaryMetal: Metal!
  variations: [CatalogueJewelleryBracelet!]!
  images360: [GenericImage!]!
  video: CatalogueVideo
  mainImage: GenericImage
  translation(locale: Locale!): CatalogueJewelleryBraceletTranslation!
  designStyles: [JewelleryDesignStyleLabel!]!
  designFeatures: [JewelleryDesignFeatureLabel!]!
  gemstones: [JewelleryGemstoneLabel!]!
  productStyles: [JewelleryBraceletProductStyleLabel!]!
  engravingDisabled: Boolean!
  firstAvailableDeliveryDate(region: RegionCode!, hasEngraving: Boolean!): DeliveryDate!
  financeOptionsAffirm(region: RegionCode!, currency: CurrencyInput!): AffirmFinanceOption
  financeOptionsKlarna(region: RegionCode!, currency: CurrencyInput!): KlarnaFinanceOption
}

type CatalogueJewelleryBraceletTranslation {
  description: String
  seoText: String
}

input CatalogueEngagementRingFilterInput {
  name: String!
  primaryMetalCode: MetalCode
  centreStoneShape: StoneShapeCode!
  suffix: String
}

input CatalogueEngagementRingContainsProductsInput {
  shape: StoneShapeCode!
}

input CatalogueSortInput {
  currency: CurrencyInput!
  by: CatalogueSortOrder! = RECOMMENDED
}

input CatalogueReadyToGoRingFilterInput {
  name: String!
  primaryMetalCode: MetalCode!
}

input CatalogueReadyToGoRingsFilterInput {
  price: CatalogueFilterPriceInput
  primaryMetalCodes: [MetalCode!]
  includeHiddenFromProductList: Boolean = false
  catalogueCode: ID
  catalogueCodes: [ID!]
  name: String
  suffix: String
  readyToShip: Boolean = false
}

input CatalogueFiltersPriceInput {
  currency: CurrencyInput!
  region: RegionCode!
}

type CatalogueReadyToGoRingFilters {
  primaryMetals: [CatalogueFilterMetalItem!]!
  price(input: CatalogueFiltersPriceInput!): CataloguePriceRangeFilter!
}

type CatalogueReadyToGoRing implements CatalogueProduct {
  catalogueCode: ID!
  productName: String!
  shortName: String!
  shortDescription: String
  suffix: String
  customTitleTag: String
  relatedProducts: [CatalogueReadyToGoRing!]!
  updatedAt: DateTime
  translation(locale: Locale!): CatalogueReadyToGoRingTranslation!
  images: [CatalogueImage!]!
  isReturnable: Boolean!
  deliveryDays: Int!
  salePrice(region: RegionCode!, currency: CurrencyInput!): SalePrice!
  primaryMetal: Metal!
  carat: Float
  gemType: GemType!
  sizes: [RecommendedRingSize!]!
  variations: [CatalogueReadyToGoRing!]!
  sku: String!
  isReadyToShip: Boolean!
  mainImage: GenericImage
  firstAvailableDeliveryDate(region: RegionCode!): DeliveryDate!
  financeOptionsAffirm(region: RegionCode!, currency: CurrencyInput!): AffirmFinanceOption
  financeOptionsKlarna(region: RegionCode!, currency: CurrencyInput!): KlarnaFinanceOption
}

type CatalogueReadyToGoRingTranslation {
  description: String
  seoText: String
}

type CatalogueEngagementRingFilters {
  price(input: CatalogueFiltersPriceInput!): CataloguePriceRangeFilter!
  primaryMetals: [CatalogueFilterMetalItem!]!
  centreStoneShapes: [CatalogueFilterShapeItem!]!
  ringStyles: [CatalogueFilterEngagementRingStylesItem!]!
  designStyles: [CatalogueFilterEngagementRingDesingStyleItem!]!
  designFeatures: [CatalogueFilterEngagementRingDesignFeatureItem!]!
}

type CatalogueEngagementRingFiltersVariation {
  primaryMetal: MetalCode
  centreStoneShape: StoneShapeCode
  ringStyle: EngagementRingStyleLabelCode
  designStyle: EngagementRingDesignStyleLabelCode
  designFeature: EngagementRingDesignFeatureLabelCode
}

type CatalogueWeddingRingFilters {
  primaryMetals: [CatalogueFilterMetalItem!]!
  price(input: CatalogueFiltersPriceInput!): CataloguePriceRangeFilter!
  categories: [CatalogueFilterWeddingRingCategoriesItem!]!
  ringStyles: [CatalogueFilterWeddingRingStylesItem!]!
}

type CatalogueWeddingRingFiltersVariation {
  primaryMetal: MetalCode
  category: WeddingRingCategoryLabelCode
  ringStyle: WeddingRingStyleLabelCode
}

input CatalogueFilterInput {
  price: CatalogueFilterPriceInput
  primaryMetalCodes: [MetalCode!]
  includeHiddenFromProductList: Boolean = false
  catalogueCode: ID
  catalogueCodes: [ID!]
  name: String
  suffix: String
}

interface CatalogueProduct {
  catalogueCode: ID!
  productName: String!
  suffix: String
  customTitleTag: String
  relatedProducts: [CatalogueProduct!]!
  images: [CatalogueImage!]!
  isReturnable: Boolean!
  deliveryDays: Int!
  salePrice(region: RegionCode!, currency: CurrencyInput!): SalePrice!
  primaryMetal: Metal!
  mainImage: GenericImage
  updatedAt: DateTime
  financeOptionsAffirm(region: RegionCode!, currency: CurrencyInput!): AffirmFinanceOption
  financeOptionsKlarna(region: RegionCode!, currency: CurrencyInput!): KlarnaFinanceOption
}

type SalePrice {
  total: Money!
  gst: Gst
}

enum GstType {
  SALES
  VAT
}

type Gst {
  type: GstType!
  price: Money!
}

type CatalogueVideo {
  uri: Uri!
  type: String!
}

type CatalogueEngagementRing implements CatalogueProduct {
  catalogueCode: ID!
  productName: String!
  suffix: String
  customTitleTag: String
  ringStyles: [EngagementRingStyleLabel!]!
  designStyle: EngagementRingDesignStyleLabel!
  designFeatures: [EngagementRingDesignFeatureLabel!]!
  relatedProducts: [CatalogueEngagementRing!]!
  images360: [GenericImage!]!
  mainImage: GenericImage
  video: CatalogueVideo
  updatedAt: DateTime
  images: [CatalogueImage!]!
  primaryMetal: Metal!
  signatureStone: Melee
  meleeItems: [CatalogueMelee!]!
  centreStoneConstraints: CatalogueEngagementRingCentreStoneConstraints!
  deliveryDays: Int!
  bandWidth: Float!
  bandThickness: Float!
  isReturnable: Boolean!
  isResizeable: Boolean!
  isAvailableForRingBuilder: Boolean!
  salePrice(region: RegionCode!, currency: CurrencyInput!): SalePrice!
  translation(locale: Locale!): CatalogueEngagementRingTranslation!
  variations: [CatalogueEngagementRing!]!
  sizes(region: RegionCode!): [RingSizeOrRecommendedRingSize!]!
  signatureStones: [CatalogueEngagementRingSignatureStone!]!
  firstAvailableDeliveryDate(region: RegionCode!, hasEngraving: Boolean!): DeliveryDate!
  financeOptionsAffirm(region: RegionCode!, currency: CurrencyInput!): AffirmFinanceOption
  financeOptionsKlarna(region: RegionCode!, currency: CurrencyInput!): KlarnaFinanceOption
}

type CatalogueEngagementRingSignatureStone {
  id: ID!
  image: Uri!
  price(region: RegionCode!, currency: CurrencyInput!): Money!
  color: StoneColor!
  crystal: StoneCrystal!
  width: String!
  isDefault: Boolean!
}

input CatalogueEngagementRingSignatureStoneInput {
  color: StoneColorCode!
  crystal: StoneCrystalCode!
  width: String!
}

type CatalogueEngagementRingCentreStoneConstraints {
  weight: CatalogueEngagementRingCentreStoneWeightConstraint!
  shape: StoneShape!
}

type CatalogueEngagementRingCentreStoneWeightConstraint {
  min: Decimal!
  max: Decimal!
}

type CatalogueWeddingRing implements CatalogueProduct {
  catalogueCode: ID!
  productName: String!
  suffix: String
  customTitleTag: String
  categories: [WeddingRingCategoryLabel!]!
  ringStyles: [WeddingRingStyleLabel!]!
  relatedProducts: [CatalogueWeddingRing!]!
  images360: [GenericImage!]!
  video: CatalogueVideo
  mainImage: GenericImage
  updatedAt: DateTime
  images: [CatalogueImage!]!
  primaryMetal: Metal!
  signatureStone: Melee
  meleeItems: [CatalogueMelee!]!
  deliveryDays: Int!
  bandWidth: Float!
  bandThickness: Float!
  bandType: CatalogueBandType
  isReturnable: Boolean!
  isResizeable: Boolean!
  salePrice(region: RegionCode!, currency: CurrencyInput!): SalePrice!
  translation(locale: Locale!): CatalogueWeddingRingTranslation!
  variations: [CatalogueWeddingRing!]!
  sizes(region: RegionCode!): [RingSizeOrRecommendedRingSize!]!
  firstAvailableDeliveryDate(region: RegionCode!, hasEngraving: Boolean!): DeliveryDate!
  financeOptionsAffirm(region: RegionCode!, currency: CurrencyInput!): AffirmFinanceOption
  financeOptionsKlarna(region: RegionCode!, currency: CurrencyInput!): KlarnaFinanceOption
}

type CatalogueBandType {
  id: ID!
  translation(locale: Locale!): CatalogueBandTypeTranslation!
}

type CatalogueBandTypeTranslation {
  name: String!
}

type CatalogueMelee {
  melee: Melee!
  quantity: Int!
}

type CatalogueEngagementRingTranslation {
  locale: Locale!
  description: String
  seoText: String
}

type CatalogueWeddingRingTranslation {
  locale: Locale!
  description: String
  seoText: String
}

input CatalogueFilterPriceInput {
  currency: CurrencyInput!
  region: RegionCode!
  min: Decimal
  max: Decimal
}

enum CatalogueSortOrder {
  RECOMMENDED
  PRICE_ASCENDING
  PRICE_DESCENDING
}

input CatalogueEngagementRingsFilterInput {
  price: CatalogueFilterPriceInput
  primaryMetalCodes: [MetalCode!]
  centreStoneShapes: [StoneShapeCode!]
  ringStyles: [EngagementRingStyleLabelCode!]
  designStyles: [EngagementRingDesignStyleLabelCode!]
  designFeatures: [EngagementRingDesignFeatureLabelCode!]
  includeHiddenFromProductList: Boolean = false
  catalogueCode: ID
  catalogueCodes: [ID!]
  name: String
  suffix: String
}

input CatalogueWeddingRingFilterInput {
  price: CatalogueFilterPriceInput
  includeHiddenFromProductList: Boolean = false
  primaryMetalCodes: [MetalCode!]
  categories: [WeddingRingCategoryLabelCode!]
  ringStyles: [WeddingRingStyleLabelCode!]
  catalogueCode: ID
  catalogueCodes: [ID!]
  name: String
  suffix: String
}

input PriceRangeBarInput {
  count: Int = 10
}

type CataloguePriceRangeFilter {
  currentRange: CataloguePriceRange!
  absoluteRange: CataloguePriceRange!
  bars(input: PriceRangeBarInput!): [CataloguePriceRangeBar!]!
}

type CataloguePriceRangeBar {
  range: CataloguePriceRange!
  totalResults: Int!
}

type CataloguePriceRange {
  min: Money!
  max: Money!
}

type CatalogueFilterShapeItem {
  shape: StoneShape!
  totalResults: Int!
}

type CatalogueFilterMetalItem {
  metal: Metal!
  totalResults: Int!
}

type CatalogueFilterEngagementRingStylesItem {
  label: EngagementRingStyleLabel!
  totalResults: Int!
}

type CatalogueFilterEngagementRingDesingStyleItem {
  label: EngagementRingDesignStyleLabel!
  totalResults: Int!
}

type CatalogueFilterEngagementRingDesignFeatureItem {
  label: EngagementRingDesignFeatureLabel!
  totalResults: Int!
}

type CatalogueFilterWeddingRingCategoriesItem {
  label: WeddingRingCategoryLabel!
  totalResults: Int!
}

type CatalogueFilterWeddingRingStylesItem {
  label: WeddingRingStyleLabel!
  totalResults: Int!
}

input CommissionJunctionInput {
  code: String!
}

type Consultant {
  id: ID!
  firstName: String!
  avatar: Uri! @deprecated(reason: "use avatarImage")
  avatarImage: GenericImage!
  user: User!
  canTakeConsultations: Boolean!
  showroom: Showroom
}

type Query {
  ping: String!
  bookingConsultationPurposes: [BookingConsultationPurpose!]!
  bookingConsultationComplexities: [BookingConsultationComplexity!]!
  bookingConsultationAvailableSlots(input: BookingConsultationSlotInput!): BookingConsultationSlotsResponse!
  """If this returns true: prompt user for phone"""
  bookingConsultationShowPhone: Boolean!
  validateConsultationInput(input: BookingCreateConsultationInput!): Boolean!
  bookingConsultation(id: ID!): BookingConsultation @deprecated(reason: "Booking form has to be reworked from the ground.")
  bookingConsultants: [Consultant!]! @deprecated(reason: "Booking form has to be reworked from the ground.")
  bookingShowrooms: [Showroom!]! @deprecated(reason: "Booking form has to be reworked from the ground.")
  bookingCustomer(id: ID!): Customer! @deprecated(reason: "Booking form has to be reworked from the ground.")
  bookingAvailableTransitions(id: ID!): [BookingConsultationTransition]! @deprecated(reason: "Booking form has to be reworked from the ground.")
  bookingInPersonConsultationRooms(showroomId: ID!, kind: BookingConsultationRoomKind!, consultationPurposeId: ID!): [BookingConsultationRoom!]! @deprecated(reason: "Booking form has to be reworked from the ground.")
  bookingVirtualConsultationRooms(showroomId: ID!, kind: BookingConsultationRoomKind!, consultationPurposeId: ID!): [BookingConsultationRoom!]! @deprecated(reason: "Booking form has to be reworked from the ground.")
  bookingConsultationAvailableSlotsByConsultant(consultationPurpose: ID!, consultationMethod: ID!, consultant: ID, showroom: ID!, ignoreConsultation: ID, consultationRoom: ID, consultationRoomKind: BookingConsultationRoomKind!, order: ID): [BookingConsultationAvailableDate!]! @deprecated(reason: "Booking form has to be reworked from the ground.")
  catalogueProducts(filter: CatalogueFilterInput, sort: CatalogueSortInput, pagination: PaginationInput): [CatalogueProduct!]!
  catalogueEngagementRings(filter: CatalogueEngagementRingsFilterInput, sort: CatalogueSortInput, pagination: PaginationInput): [CatalogueEngagementRing!]!
  catalogueEngagementRing(filter: CatalogueEngagementRingFilterInput!): CatalogueEngagementRing
  catalogueEngagementRingsAggregate(filter: CatalogueEngagementRingsFilterInput): CatalogueAggregate!
  catalogueEngagementRingFilters(input: CatalogueEngagementRingsFilterInput!): CatalogueEngagementRingFilters!
  catalogueEngagementRingFiltersVariations: [CatalogueEngagementRingFiltersVariation!]!
  catalogueEngagementRingContainsProducts(input: [CatalogueEngagementRingContainsProductsInput!]!): [Boolean!]!
  catalogueWeddingRings(filter: CatalogueWeddingRingFilterInput, sort: CatalogueSortInput, pagination: PaginationInput): [CatalogueWeddingRing!]!
  catalogueWeddingRingsAggregate(filter: CatalogueWeddingRingFilterInput): CatalogueAggregate!
  catalogueWeddingRingFilters(input: CatalogueWeddingRingFilterInput!): CatalogueWeddingRingFilters!
  catalogueWeddingRingFilterVariations: [CatalogueWeddingRingFiltersVariation!]!
  catalogueReadyToGoRings(filter: CatalogueReadyToGoRingsFilterInput, sort: CatalogueSortInput, pagination: PaginationInput): [CatalogueReadyToGoRing!]!
  catalogueReadyToGoRing(filter: CatalogueReadyToGoRingFilterInput!): CatalogueReadyToGoRing
  catalogueReadyToGoRingsAggregate(filter: CatalogueReadyToGoRingsFilterInput): CatalogueAggregate!
  catalogueReadyToGoRingsFilters(input: CatalogueReadyToGoRingsFilterInput!): CatalogueReadyToGoRingFilters!
  catalogueJewelleries(filter: CatalogueJewelleriesFilterInput, sort: CatalogueSortInput, pagination: PaginationInput): [CatalogueJewellery!]!
  catalogueJewellery(filter: CatalogueJewelleryFilterInput!): CatalogueJewellery
  catalogueJewelleriesFilters(input: CatalogueJewelleriesFilterInput): CatalogueJewelleriesFilters!
  catalogueJewelleriesFiltersVariations: [CatalogueJewelleriesFiltersVariation!]!
  catalogueJewelleriesAggregate(filter: CatalogueJewelleriesFilterInput): CatalogueAggregate!
  catalogueJewelleryNecklaces(filter: CatalogueJewelleriesNecklacesFilterInput, sort: CatalogueSortInput, pagination: PaginationInput): [CatalogueJewelleryNecklace!]!
  catalogueJewelleryNecklace(filter: CatalogueJewelleryFilterInput!): CatalogueJewelleryNecklace
  catalogueJewelleryNecklacesFilters(input: CatalogueJewelleriesNecklacesFilterInput): CatalogueJewelleryNecklacesFilters!
  catalogueJewelleryNecklacesFiltersVariations: [CatalogueJewelleriesNecklacesFiltersVariation!]!
  catalogueJewelleryNecklacesAggregate(filter: CatalogueJewelleriesNecklacesFilterInput): CatalogueAggregate!
  catalogueJewelleryEarrings(filter: CatalogueJewelleriesEarringsFilterInput, sort: CatalogueSortInput, pagination: PaginationInput): [CatalogueJewelleryEarrings!]!
  catalogueJewelleryEarring(filter: CatalogueJewelleryFilterInput!): CatalogueJewelleryEarrings
  catalogueJewelleryEarringsFilters(input: CatalogueJewelleriesEarringsFilterInput): CatalogueJewelleryEarringsFilters!
  catalogueJewelleryEarringsFiltersVariations: [CatalogueJewelleriesEarringsFiltersVariation!]!
  catalogueJewelleryEarringsAggregate(filter: CatalogueJewelleriesEarringsFilterInput): CatalogueAggregate!
  catalogueJewelleryBracelets(filter: CatalogueJewelleriesBraceletsFilterInput, sort: CatalogueSortInput, pagination: PaginationInput): [CatalogueJewelleryBracelet!]!
  catalogueJewelleryBracelet(filter: CatalogueJewelleryFilterInput!): CatalogueJewelleryBracelet
  catalogueJewelleryBraceletsFilters(input: CatalogueJewelleriesBraceletsFilterInput): CatalogueJewelleryBraceletsFilters!
  catalogueJewelleryBraceletFiltersVariations: [CatalogueJewelleriesBraceletsFiltersVariation!]!
  catalogueJewelleryBraceletsAggregate(filter: CatalogueJewelleriesBraceletsFilterInput): CatalogueAggregate!
  defaultRegion: Region!
  defaultAlternateRegion: Region!
  regions: [Region!]!
  region(code: RegionCode!): Region!
  regionSuggest: Region!
  deliveryDaysForBespokeEngagementRings: Int!
  metals: [Metal!]!
  convertMoney(input: [ConvertMoneyInput!]!): [Money!]!
  stoneClarityBySystemCode(systemCode: StoneClarityCode!): StoneClarity!
  stoneClaritiesBySystemCode(systemCodes: [StoneClarityCode!]!): [StoneClarity!]!
  stoneColorBySystemCode(systemCode: StoneColorCode!): StoneColor!
  stoneColorsBySystemCode(systemCodes: [StoneColorCode!]!): [StoneColor!]!
  stoneCategoryBySystemCode(systemCode: StoneCategoryCode!): StoneCategory!
  stoneCategoriesBySystemCode(systemCodes: [StoneCategoryCode!]!): [StoneCategory!]!
  stoneShapeBySystemCodes(systemCodes: [StoneShapeCode!]!): [StoneShape!]!
  stoneCutsBySystemCodes(systemCodes: [StoneCutCode!]!): [StoneCut!]!
  stoneGradesBySystemCodes(systemCodes: [StoneGradeCode!]!): [StoneGrade!]!
  stoneFluorescencesBySystemCodes(systemCodes: [StoneFluorescenceCode!]!): [StoneFluorescence!]!
  stonePolishesBySystemCodes(systemCodes: [StonePolishCode!]!): [StonePolish!]!
  stoneSymmetriesBySystemCodes(systemCodes: [StoneSymmetryCode!]!): [StoneSymmetry!]!
  stoneColors(filter: StoneColorsFilterInput): [StoneColor!]!
  stoneClarities(filter: StoneClarityFilterInput): [StoneClarity!]!
  stoneShapes(filter: StoneShapeFilterInput): [StoneShape!]!
  stoneGrades(filter: StoneGradesFilterInput): [StoneGrade!]!
  stoneCrystals(filter: StoneCrystalsFilterInput): [StoneCrystal!]!
  languages: [Language!]!
  language(locale: Locale!): Language
  customerExists(email: Email!): Boolean!
  validateCustomerRegistrationInput(input: CustomerRegistrationInput!): Boolean!
  me: User
  convertPriceBoundsForGems(input: ConvertPriceBoundsForGems!): GemsApiPriceBounds!
  convertPriceBoundsForGemsMulti(input: [ConvertPriceBoundsForGems!]!): [GemsApiPriceBounds!]!
  calculateGemsApiStoneTotalSalePrices(input: [CalculateGemsApiStoneTotalSalePriceInput!]!): [Money!]!
  nonSkuLabGrownDiamonds(region: RegionCode!, currency: CurrencyInput!, filters: NonSkuLabGrownDiamondsFilters, sort: NonSkuLabGrownDiamondSortInput): [NonSkuLabGrown!]!
  nonSkuLabGrownDiamondsBounds: NonSkuLabGrownDiamondsBounds!
  nonSkuLabGrownDiamond(filter: NonSkuLabGrownDiamondFilterInput!): NonSkuLabGrown
  nonSkuGemStones(region: RegionCode!, currency: CurrencyInput!, filters: NonSkuGemstoneFilters, sort: NonSkuGemstoneSortInput): [NonSkuGemstone!]!
  nonSkuGemStonesBounds: NonSkuGemstonesBounds!
  nonSkuGemStone(filter: NonSkuGemstoneFilterInput!): NonSkuGemstone
  nonSkuLabGrownPricingCells(filters: NonSkuLabGrownPricingCellFilters): [NonSkuLabGrown!]!
  nonSkuGemStonesPricingCells(filters: NonSkuGemStonesPricingCellFilters): [NonSkuGemstone!]!
  nonSkuLabGrownShapeDimensions: [NonSkuLabGrownShapeDimension!]!
  nonSkuLabGrownCaratDimensions: [NonSkuLabGrownCaratDimension!]!
  nonSkuLabGrownGradeDimensions: [NonSkuLabGrownGradeDimension!]!
  nonSkuGemstoneShapeDimensions: [NonSkuGemstoneShapeDimension!]!
  nonSkuGemstoneGradeClarityDimensions: [NonSkuGemstoneGradeClarityDimension!]!
  nonSkuGemstoneColorCrystalDimensions: [NonSkuGemstoneType!]!
  nonSkuGemstoneCaratDimensions: [NonSkuGemstoneCaratDimension!]!
  nonSkuGemstoneImages: [NonSkuGemstoneImage!]!
  ringBuilder(
    """THIS WILL BECOME REQUIRED"""
    input: RingBuilderGetInput
  ): RingBuilder!
  searchEverywhere(query: String!, justMe: Boolean!): SearchEverywhereResponse!
}

type Mutation {
  ping: String!
  """For not-logged user"""
  createConsultationNewCustomer(input: BookingCreateConsultationInput!, customer: CustomerRegistrationInput!): BookingCreateConsultationNewCustomerResponse!
  """For logged user"""
  createConsultationExistingCustomer(input: BookingCreateConsultationInput!): BookingCreateConsultationExistingCustomerResponse!
  cancelConsultation(input: BookingCancelConsultationInput!): Boolean!
  createConsultationByConsultant(customer: ID!, opportunity: String, consultationPurpose: ID!, consultationMethod: ID!, autoAssignConsultant: Boolean!, reassignOpportunity: Boolean!, order: ID, input: BookingConsultationMutableFields!): BookingConsultation @deprecated(reason: "Booking form has to be reworked from the ground.")
  updateConsultationByConsultant(id: ID!, reassignOpportunity: Boolean!, consultationRoom: ID, input: BookingConsultationMutableFields!): BookingConsultation @deprecated(reason: "Booking form has to be reworked from the ground.")
  applyTransitionToConsultationByConsultant(id: ID!, transition: String!): BookingConsultation @deprecated(reason: "Booking form has to be reworked from the ground.")
  removeFromMyCart(productId: ID!): Order!
  setOrderCollectFromShowroomInformation(input: CollectFromShowroomInput!): SetDeliveryInformationResponse!
  setOrderDeliverToAddressInformation(input: DeliverToAddressInput!): SetDeliveryInformationResponse!
  payViaNoPayment(orderId: ID!): Order!
  createAffirmTransaction(input: AffirmTransactionInput!): AffirmTransaction!
  payViaAffirm(input: AffirmPaymentInput!): AffirmPaymentResponse!
  completeAffirmTransactionPostIframe(input: AffirmCompleteTransactionInput!): AffirmCompleteTransactionResponse!
  createAllocationTransaction(input: AllocationTransactionInput!): AllocationTransaction!
  payViaAllocation(allocationTransactionId: ID!): Order!
  createBankTransaction(orderId: ID!): BankTransaction!
  payViaBank(bankTransactionId: ID!): Order!
  createCheckoutcomTransaction(input: CreateCheckoutcomTransactionInput!): CreateCheckoutcomTransactionResponse!
  payViaCheckoutcom(input: PayViaCheckoutcomInput!): PayViaCheckoutcomResponse!
  completeCheckoutcomTransactionPost3ds(input: CompleteCheckoutcomTransactionInput!): CompleteCheckoutcomTransactionPost3dsResponse!
  createKlarnaTransaction(input: KlarnaTransactionInput!): KlarnaTransaction!
  payViaKlarna(input: KlarnaPaymentInput!): KlarnaPaymentResponse!
  applyPromoCode(promoCode: String!): PromoCodeApplicationResult
  questionnaireCompleteExistingCustomer(input: QuestionnaireCompleteInput!): QuestionnaireCompletedExistingCustomerResponse!
  questionnaireCompleteNewCustomer(input: QuestionnaireCompleteInput!, customer: CustomerRegistrationInput!): QuestionnaireCompletedNewCustomerResponse!
  magicLinkRequest(input: MagicLinkRequest!): Void
  magicLinkConsume(input: MagicLinkConsume!): MagicLinkConsumeResponse!
  createDesignInspiration(file: Upload!): DesignInspiration!
  loginWithGoogle(credentials: CustomerRegistrationByGoogleInput!): LoginResponse!
  login(credentials: CredentialsInput!): LoginResponse!
  autologin(authToken: String!): LoginResponse!
  logout: Boolean!
  refreshToken(token: String!): LoginResponse!
  impersonate(identifier: String!): LoginResponse!
  createEnquiryExistingCustomer(input: EnquiryInput!): EnquiryResponseExistingCustomer!
  createEnquiryNewCustomer(input: EnquiryInput!, customer: CustomerRegistrationInput!): EnquiryResponseNewCustomer!
  createEnquiryContactUsExistingCustomer(input: EnquiryContactUsInput!): EnquiryResponseExistingCustomer!
  createEnquiryContactUsNewCustomer(input: EnquiryContactUsInput!, customer: CustomerRegistrationInput!): EnquiryResponseNewCustomer!
  createEnquiryCustomEngagementRingExistingCustomer(input: EnquiryCustomEngagementRing!): EnquiryResponseExistingCustomer!
  createEnquiryCustomEngagementRingNewCustomer(input: EnquiryCustomEngagementRing!, customer: CustomerRegistrationInput!): EnquiryResponseNewCustomer!
  createEnquiryEngagementRingPreferAnotherShapeExistingCustomer(input: EnquiryEngagementRingCollectionInput!): EnquiryResponseExistingCustomer!
  createEnquiryEngagementRingPreferAnotherShapeNewCustomer(input: EnquiryEngagementRingCollectionInput!, customer: CustomerRegistrationInput!): EnquiryResponseNewCustomer!
  createEnquiryDiamondSearchProductExistingCustomer(input: EnquiryDiamondSearchProduct!): EnquiryResponseExistingCustomer!
  createEnquiryDiamondSearchProductNewCustomer(input: EnquiryDiamondSearchProduct!, customer: CustomerRegistrationInput!): EnquiryResponseNewCustomer!
  nonSkuLabGrownGradeDimensionDelete(id: ID!): NonSkuLabGrownGradeDimension!
  nonSkuLabGrownGradeDimensionCreate(input: NonSkuLabGrownGradeDimensionCreateInput!): NonSkuLabGrownGradeDimension!
  nonSkuLabGrownShapeDimensionDelete(id: ID!): NonSkuLabGrownShapeDimension!
  nonSkuLabGrownShapeDimensionCreate(input: NonSkuLabGrownShapeDimensionCreateInput!): NonSkuLabGrownShapeDimension!
  nonSkuLabGrownShapeDimensionUpdate(id: ID!, input: NonSkuLabGrownShapeDimensionUpdateInput!): NonSkuLabGrownShapeDimension!
  nonSkuLabGrownCaratDimensionDelete(id: ID!): NonSkuLabGrownCaratDimension!
  nonSkuLabGrownCaratDimensionCreate(input: NonSkuLabGrownCaratDimensionCreateInput!): NonSkuLabGrownCaratDimension!
  nonSkuLabGrownDiamondCreate(input: NonSkuLabGrownDiamondCreateInput!): NonSkuLabGrown! @deprecated(reason: "use nonSkuLabGrownDiamondCreateOrUpdate")
  nonSkuLabGrownDiamondDelete(id: ID!): NonSkuLabGrown!
  nonSkuLabGrownDiamondDeleteImage(id: ID!): NonSkuLabGrown!
  nonSkuLabGrownDiamondChangeImage(id: ID!, image: Upload!): NonSkuLabGrown!
  nonSkuGemstoneShapeDimensionDelete(id: ID!): NonSkuGemstoneShapeDimension!
  nonSkuGemstoneShapeDimensionCreate(input: NonSkuGemstoneShapeDimensionCreateInput!): NonSkuGemstoneShapeDimension!
  nonSkuGemstoneGradeClarityDimensionDelete(id: ID!): NonSkuGemstoneGradeClarityDimension!
  nonSkuGemstoneGradeClarityDimensionCreate(input: NonSkuGemstoneGradeClarityDimensionCreateInput!): NonSkuGemstoneGradeClarityDimension!
  nonSkuGemstoneColorCrystalDimensionDelete(id: ID!): NonSkuGemstoneType!
  nonSkuGemstoneColorCrystalDimensionCreate(input: NonSkuGemstoneColorCrystalDimensionCreateInput!): NonSkuGemstoneType!
  nonSkuGemstoneCaratDimensionDelete(id: ID!): NonSkuGemstoneCaratDimension!
  nonSkuGemstoneCaratDimensionCreate(input: NonSkuGemstoneCaratDimensionCreateInput!): NonSkuGemstoneCaratDimension!
  nonSkuGemStoneCreate(input: NonSkuGemStoneCreateInput!): NonSkuGemstone! @deprecated(reason: "use nonSkuGemStoneCreateOrUpdate")
  nonSkuGemStoneDelete(id: ID!): NonSkuGemstone!
  nonSkuGemStoneChangeImage(id: ID!, image: Upload!): NonSkuGemstone!
  nonSkuGemStoneDeleteImage(id: ID!): NonSkuGemstone!
  nonSkuGemstoneImageCreate(input: NonSkuGemstoneImageCreateInput!): NonSkuGemstoneImage!
  nonSkuGemstoneImageUpdate(id: ID!, input: NonSkuGemstoneImageUpdateInput!): NonSkuGemstoneImage!
  nonSkuGemstoneImageDelete(id: ID!): NonSkuGemstoneImage!
  designStudioProductEngagementRingUpdate(id: ID!, input: DesignStudioProductEngagementRingUpdate!): DesignStudioProductEngagementRing!
  designStudioProductWeddingRingUpdate(id: ID!, input: DesignStudioProductWeddingRingUpdate!): DesignStudioProductWeddingRing!
  designStudioQuotationEngagementRingUpdate(id: ID!, input: DesignStudioQuotationEngagementRingUpdate!): QuotationEngagementRing!
  addDesignStudioProductToMyCart(productId: ID!): Order!
  createDesignStudioProductAndAddToCartWeddingRingNewCustomer(input: DesignStudioWeddingRingInput!, customer: CustomerRegistrationInput!): CatalogueDesignStudioCheckoutWeddingRingNewCustomerResponse!
  createDesignStudioProductAndAddToCartWeddingRingExistingCustomer(input: DesignStudioWeddingRingInput!): CatalogueDesignStudioCheckoutWeddingRingExistingCustomerResponse!
  createDesignStudioProductAndAddToCartJewelleryNewCustomer(input: DesignStudioJewelleryInput!, customer: CustomerRegistrationInput!): CatalogueDesignStudioCheckoutJewelleryNewCustomerResponse!
  createDesignStudioProductAndAddToCartJewelleryExistingCustomer(input: DesignStudioJewelleryInput!): CatalogueDesignStudioCheckoutJewelleryExistingCustomerResponse!
  addToCartReadyToGoRingNewCustomer(input: AddToCartReadyToGoRingInput!, customer: CustomerRegistrationInput!): AddToCartReadyToGoRingNewCustomerResponse!
  addToCartReadyToGoRingExistingCustomer(input: AddToCartReadyToGoRingInput!): AddToCartReadyToGoRingExistingCustomerResponse!
  ringBuilder(input: RingBuilderInput!): RingBuilder!
  ringBuilderResolveNewCustomer(input: RingBuilderResolveInput!, customer: CustomerRegistrationInput!): RingBuilderResolvedNewCustomer!
  ringBuilderResolveExistingCustomer(input: RingBuilderResolveInput!): RingBuilderResolvedExistingCustomer!
  marketingData(input: MarketingDataInput!): MarketingDataResponse!
}

scalar Decimal

scalar DateTime

scalar Date

scalar Time

scalar Email

scalar PhoneNumber

enum PhoneNumberFormat {
  E164
  INTERNATIONAL
  NATIONAL
  RFC3966
}

input PhoneNumberInput {
  countryCode: String!
  nationalNumber: String!
}

type PhoneNumberType {
  e164: PhoneNumber!
  countryCode: String
  nationalNumber: String
  formatted(format: PhoneNumberFormat!): String!
}

scalar Uri

scalar Void

scalar JSON

scalar Upload

type Asset {
  id: ID!
  url: String!
  mimeType: String!
  sources: [ImageSrc!]!
  size(name: ImageSizeName!): ImageSize!
}

enum ImageSizeName {
  COVER
  LARGE
  MEDIUM
  SMALL
  COVER_X2
  LARGE_X2
  MEDIUM_X2
  SMALL_X2
}

type GenericImage {
  url: String!
  mimeType: String!
  sources: [ImageSrc!]!
  size(name: ImageSizeName!): ImageSize!
}

type ImageSize {
  name: ImageSizeName!
  url: String!
  sources: [ImageSrc!]!
}

type ImageSrc {
  url: String!
  mimeType: String!
}

input PaginationInput {
  page: Int = 1
  limit: Int = 10
}

type GeoPoint {
  id: ID!
  latitude: Float!
  longitude: Float!
}

scalar Country

""" we support subdivisions only for USA atm """
scalar CountrySubdivision

enum RegionCode {
  INT
  US
  UK
  EU
  IE
  NZ
  AU
  CA
  ZA
}

type Region {
  code: RegionCode!
  language: Language!
  locales: [Locale!]!
  currency: Currency!
  representingCountry: Country!
  isActive: Boolean!
  vat: Decimal!
}

type DeliveryDate {
  date: DateTime!
  validUntil: DateTime!
}

type Order {
  id: ID!
  products: [OrderProduct!]!
  promoCode: PromoCode
  status: OrderStatus!
  isCompleted: Boolean!
  placementDate: DateTime
  shippingAddress: OrderAddress!
  billingAddress: OrderAddress!
  availableShowroomsForCollection: [Showroom!]!
  """null desiredDeliveryDate means ASAR"""
  desiredDeliveryDate: DateTime
  isAsarEnabled: Boolean!
  isShippingAddressReadonly: Boolean!
  isDeliveryConfirmed: Boolean!
  paymentPlan: PaymentPlan!
  subtotalAmount: Money!
  prediscountSubtotalAmount: Money!
  prediscountTotalAmount: Money!
  savedAmount: Money!
  vatAmount: Money!
  salesTaxAmount: Money!
  shippingAmount: Money!
  totalAmount: Money!
  paidAmount: Money!
  remainingAmount: Money!
  paymentMethods: PaymentMethodContainer!
  transactions: [TransactionInterface!]!
  """ null before order is dispatched and for collection orders"""
  shipmentTrackingInformation: ShipmentTrackingInformation
  customer: Customer!
  firstAvailableDeliveryDate: DeliveryDate!
  """mask"""
  allowedWeekdays: Int!
  disabledDates: [DateTime!]!
}

type OrderStatus {
  name(locale: Locale!): String!
}

type ShipmentTrackingInformation {
  """not to be confused with the order's dispatched at date"""
  dispatchedAt: DateTime!
  shippingCompany: String!
  trackingNumber: String!
  trackingUrl: String!
}

input DeliverToAddressInput {
  orderId: ID!
  shippingAddress: OrderShipToAddressInput!
  """
  null billingAddress signifies that billing address is the same as shipping address
  """
  billingAddress: OrderBillingAddressInput
  """null desiredDeliveryDate means ASAR"""
  desiredDeliveryDate: DateTime
}

input CollectFromShowroomInput {
  orderId: ID!
  showroomID: ID!
  deliveryData: OrderCollectFromShowroomDeliveryInput!
  billingAddress: OrderBillingAddressInput!
}

input OrderCollectFromShowroomDeliveryInput {
  firstName: String!
  lastName: String!
  phoneNumber: PhoneNumberInput!
  email: Email!
  deliveryInstructions: String!
}

input OrderShipToAddressInput {
  firstName: String!
  lastName: String!
  email: Email!
  phoneNumber: PhoneNumberInput!
  addressLine1: String!
  addressLine2: String
  city: String!
  postalCode: String!
  subdivision: CountrySubdivision
  deliveryInstructions: String
}

input OrderBillingAddressInput {
  firstName: String!
  lastName: String!
  phoneNumber: PhoneNumberInput
  addressLine1: String!
  addressLine2: String
  city: String!
  postalCode: String!
  country: Country!
  subdivision: CountrySubdivision
}

interface TransactionInterface {
  id: ID!
  amount: Money!
  createdAt: DateTime!
  status: TransactionStatus!
}

enum TransactionStatusCode {
  CREATED
  INITIALISED
  PENDING
  COMPLETED
  DECLINED
  EXPIRED
  VOIDED
}

type TransactionStatus {
  systemCode: TransactionStatusCode!
  name(locale: Locale!): String!
}

type LegacyTransaction implements TransactionInterface {
  id: ID!
  amount: Money!
  createdAt: DateTime!
  status: TransactionStatus!
  paymentMethodName(locale: Locale!): String!
}

type PaymentMethodContainer {
  noPayment: NoPaymentMethod
  affirmPayment: AffirmPaymentMethod
  allocationPayment: AllocationPaymentMethod
  bankPayment: BankPaymentMethod
  checkoutcomPayment: CheckoutcomPaymentMethod
  klarnaPayment: KlarnaPaymentMethod
}

type NoPaymentMethod {
  systemCode: ID!
}

type PaymentPlan {
  paid: [PaymentPlanPaidRecord!]!
  current: PaymentPlanUpcomingRecord
  upcoming: [PaymentPlanUpcomingRecord!]!
}

type PaymentPlanPaidRecord {
  amount: Money!
  paidOn: DateTime!
}

type PaymentPlanUpcomingRecord {
  amount: Money!
}

type OrderProduct {
  id: ID!
  order: Order!
  image: String
  name: String!
  prediscountTotalSaleAmount: Money!
  totalSaleAmount: Money!
  designStudioProduct: DesignStudioProduct
  customer: Customer!
}

type OrderAddress {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: PhoneNumberType
  addressLine1: String
  addressLine2: String
  city: String
  postalCode: String
  country: Country!
  subdivision: CountrySubdivision
  deliveryInstructions: String
}

union SetDeliveryInformationResponse = SetDeliveryInformationSuccessResponse | SetDeliveryInformationFailureResponse

type SetDeliveryInformationFailureResponse {
  errors: [SetDeliveryInformationError!]!
}

union SetDeliveryInformationError = OrderAlreadyCompletedError

type SetDeliveryInformationSuccessResponse {
  order: Order!
}

type OrderAlreadyCompletedError {
  message: String!
}

type OrderEmptyError {
  message: String!
}

type PaymentAmountInvalidError {
  message: String!
}

type OrderAddressNotConfirmedError {
  message: String!
}

type DesiredDeliveryDateInvalidError {
  message: String!
}

type PaymentMethodNotAllowedError {
  message: String!
}

type AvataxAddressInvalidError {
  message: String!
}

type AffirmFinanceOption {
  price: Money!
  months: Int!
  perMonth: Money!
}

type AffirmPaymentMethod {
  systemCode: ID!
  publicKey: String!
  scriptUrl: String!
}

input AffirmTransactionInput {
  orderId: ID!
}

type AffirmTransaction implements TransactionInterface {
  id: ID!
  amount: Money!
  createdAt: DateTime!
  status: TransactionStatus!
  """After decoding you need to set .items.item_url to the product url"""
  checkoutObject: JSON!
}

input AffirmPaymentInput {
  transactionId: ID!
}

type AffirmPaymentResponse {
  errors: [String!]!
  order: Order!
}

input AffirmCompleteTransactionInput {
  transactionId: ID!
  """checkoutToken=null means declined"""
  checkoutToken: String
}

type AffirmCompleteTransactionResponse {
  errors: [String!]!
  order: Order!
}

type AllocationPaymentMethod {
  systemCode: ID!
  maxAmount: Money!
}

type AllocationTransaction implements TransactionInterface {
  id: ID!
  amount: Money!
  createdAt: DateTime!
  status: TransactionStatus!
}

input AllocationTransactionInput {
  orderId: ID!
  amount: Decimal!
}

type BankPaymentMethod {
  systemCode: ID!
}

type BankTransaction implements TransactionInterface {
  id: ID!
  amount: Money!
  createdAt: DateTime!
  status: TransactionStatus!
}

type CheckoutcomPaymentMethod {
  systemCode: ID!
  debugMode: Boolean!
  publicKey: String!
}

input CreateCheckoutcomTransactionInput {
  orderId: ID!
  cardToken: String!
}

type CheckoutcomTransaction implements TransactionInterface {
  id: ID!
  amount: Money!
  createdAt: DateTime!
  status: TransactionStatus!
}

input PayViaCheckoutcomInput {
  checkoutcomTransactionId: ID!
  returnUrl: Uri!
}

input CompleteCheckoutcomTransactionInput {
  checkoutcomTransactionId: ID!
  ckoId: String!
}

union CreateCheckoutcomTransactionResponse = CreateCheckoutcomTransactionSuccessResponse | CreateCheckoutcomTransactionFailureResponse

type CreateCheckoutcomTransactionFailureResponse {
  errors: [CreateCheckoutcomTransactionError!]!
}

union CreateCheckoutcomTransactionError = OrderAlreadyCompletedError | PaymentAmountInvalidError | OrderAddressNotConfirmedError | DesiredDeliveryDateInvalidError | AvataxAddressInvalidError | OrderEmptyError | PaymentMethodNotAllowedError

type CreateCheckoutcomTransactionSuccessResponse {
  transaction: CheckoutcomTransaction!
}

union PayViaCheckoutcomResponse = PayViaCheckoutcomSuccessResponse | PayViaCheckoutcomFailureResponse

type PayViaCheckoutcomFailureResponse {
  errors: [PayViaCheckoutcomError!]!
}

union PayViaCheckoutcomError = OrderAlreadyCompletedError | PaymentAmountInvalidError | DesiredDeliveryDateInvalidError | CheckoutcomOperationDeclinedError

type PayViaCheckoutcomSuccessResponse {
  order: Order!
  redirectUrl: String!
}

union CompleteCheckoutcomTransactionPost3dsResponse = CompleteCheckoutcomTransactionPost3dsSuccessResponse | CompleteCheckoutcomTransactionPost3dsFailureResponse

type CompleteCheckoutcomTransactionPost3dsFailureResponse {
  errors: [CompleteCheckoutcomTransactionPost3dsError!]!
}

union CompleteCheckoutcomTransactionPost3dsError = OrderAlreadyCompletedError | PaymentAmountInvalidError | DesiredDeliveryDateInvalidError | CheckoutcomOperationDeclinedError

type CompleteCheckoutcomTransactionPost3dsSuccessResponse {
  order: Order!
}

type CheckoutcomOperationDeclinedError {
  message: String!
}

type KlarnaFinanceOption {
  price: Money!
  months: Int!
  perMonth: Money!
}

type KlarnaPaymentMethod {
  systemCode: ID!
}

input KlarnaTransactionInput {
  orderId: ID!
  """deposit amount within 20% and 50% of order total"""
  depositAmount: Decimal!
}

type KlarnaTransaction implements TransactionInterface {
  id: ID!
  amount: Money!
  createdAt: DateTime!
  status: TransactionStatus!
  sessionData: JSON!
}

input KlarnaPaymentInput {
  orderId: ID!
  data: String!
}

type KlarnaPaymentResponse {
  errors: [String!]!
  order: Order!
}

type StripeTransaction implements TransactionInterface {
  id: ID!
  amount: Money!
  createdAt: DateTime!
  status: TransactionStatus!
}

enum MetalCode {
  EIGHTEEN_KARAT_WHITE_GOLD
  EIGHTEEN_KARAT_ROSE_GOLD
  EIGHTEEN_KARAT_YELLOW_GOLD
  FOURTEEN_KARAT_WHITE_GOLD
  FOURTEEN_KARAT_ROSE_GOLD
  FOURTEEN_KARAT_YELLOW_GOLD
  NINE_KARAT_WHITE_GOLD
  NINE_KARAT_ROSE_GOLD
  NINE_KARAT_YELLOW_GOLD
  PLATINUM
  SILVER
}

type Metal {
  systemCode: MetalCode!
  name: String!
  element: MetalElement!
  color: MetalColor
  karat: Int
  orderIndex: Int!
  millesimalFineness: Decimal!
}

enum MetalColorCode {
  WHITE
  ROSE
  YELLOW
}

type MetalColor {
  systemCode: MetalColorCode!
  translation(locale: Locale!): MetalColorTranslation!
}

type MetalColorTranslation {
  name: String!
}

enum MetalElementCode {
  PLATINUM
  SILVER
  GOLD
}

type MetalElement {
  systemCode: MetalElementCode!
  translation(locale: Locale!): MetalElementTranslation!
}

type MetalElementTranslation {
  name: String!
}

scalar Currency

type Money {
  amount: Decimal!
  currency: Currency!
}

input CurrencyInput {
  region: RegionCode!
  currency: Currency
}

input MoneyInput {
  amount: Decimal!
  currency: CurrencyInput!
}

input ConvertMoneyInput {
  money: MoneyInput!
  targetCurrency: Currency!
}

type ProductLabelTranslation {
  name: String!
}

type EngagementRingStyleLabel {
  systemCode: EngagementRingStyleLabelCode!
  translation(locale: Locale!): ProductLabelTranslation!
  icon: Asset
}

enum EngagementRingStyleLabelCode {
  SOLITAIRE
  PAVE
  HALO
  TRILOGY
  GEMSTONE_SIDES
  TOI_MOI
}

type EngagementRingDesignStyleLabel {
  systemCode: EngagementRingDesignStyleLabelCode!
  translation(locale: Locale!): ProductLabelTranslation!
  icon: Asset
}

enum EngagementRingDesignStyleLabelCode {
  VINTAGE
  CONTEMPORARY
  ART_DECO
  CLASSIC
  UNIQUE
  FLORAL
}

type EngagementRingDesignFeatureLabel {
  systemCode: EngagementRingDesignFeatureLabelCode!
  translation(locale: Locale!): ProductLabelTranslation!
  icon: Asset
}

enum EngagementRingDesignFeatureLabelCode {
  EAGLE_CLAWS
  CATHEDRAL_SETTING
  MILGRAIN
  FISHTAIL
  SPLIT_SHANK
  MIXED_METAL
  CHANNEL_SETTING
  BEAD_SETTING
  BEZEL_SETTING
  DOUBLE_HALO
  COLOURED_GEMSTONES
  HAND_ENGRAVING
}

enum WeddingRingCategoryLabelCode {
  MENS
  LADIES
}

type WeddingRingCategoryLabel {
  systemCode: WeddingRingCategoryLabelCode!
  translation(locale: Locale!): ProductLabelTranslation!
  icon: Asset
}

type WeddingRingStyleLabel {
  systemCode: WeddingRingStyleLabelCode!
  translation(locale: Locale!): ProductLabelTranslation!
  icon: Asset
}

enum WeddingRingStyleLabelCode {
  PLAIN
  PAVE
  BEZEL_SET
  CHANNEL_SET
  DIAMOND
  CURVED
  SAPPHIRE
  BAGUETTE
  TWISTED
  CHEVRON
}

type JewelleryDesignStyleLabel {
  systemCode: JewelleryDesignStyle!
  translation(locale: Locale!): ProductLabelTranslation!
  icon: Asset
}

enum JewelleryDesignStyle {
  VINTAGE
  CONTEMPORARY
  ART_DECO
  CLASSIC
  UNIQUE
  FLORAL
  BIRTHSTONE
}

type JewelleryDesignFeatureLabel {
  systemCode: JewelleryDesignFeature!
  translation(locale: Locale!): ProductLabelTranslation!
  icon: Asset
}

type JewelleryGemstoneLabel {
  systemCode: JewelleryGemstoneCode!
  translation(locale: Locale!): ProductLabelTranslation!
  icon: Asset
}

enum JewelleryGemstoneCode {
  DIAMOND_APR
  SAPPHIRE_SEP
  RUBY_JUL
  PEARL
  GARNET_JAN
  EMERALD_MAY
  AMETHYST_FEB
  AQUAMARINE_MAR
  ALEXANDRITE_JUN
  PERIDOT_AUG
  TOPAZ_NOV
  TANZANITE_DEC
  TOURMALINE_OCT
}

enum JewelleryDesignFeature {
  PAVE
  BEZEL_SETTING
  FOUR_CLAW
  PETITE
  STATEMENT
  COLOURED_GEMSTONES
}

type JewelleryBraceletProductStyleLabel {
  systemCode: JewelleryBraceletProductStyle!
  translation(locale: Locale!): ProductLabelTranslation!
  icon: Asset
}

enum JewelleryBraceletProductStyle {
  TENNIS
  DIAMOND
  BANGLE
  GEMSTONE
}

type JewelleryEarringsProductStyleLabel {
  systemCode: JewelleryEarringsProductStyle!
  translation(locale: Locale!): ProductLabelTranslation!
  icon: Asset
}

enum JewelleryEarringsProductStyle {
  STUDS
  HOOPS
  DROP
  CLUSTER
}

type JewelleryNecklaceProductStyleLabel {
  systemCode: JewelleryNecklaceProductStyle!
  translation(locale: Locale!): ProductLabelTranslation!
  icon: Asset
}

enum JewelleryNecklaceProductStyle {
  LONG
  SHORT
  SOLITAIRE
}

type PromoCode {
  id: ID!
  code: String!
}

type PromoCodeApplicationResult {
  error: PromoCodeApplicationError
}

enum PromoCodeApplicationError {
  ERROR_DOES_NOT_EXIST
  ERROR_DISABLED
  ERROR_EXPIRED
  ERROR_FIRST_SALE_ONLY
  ERROR_AFTER_FIRST_SALE_ONLY
  ERROR_SINGLE_USE_ONLY
  ERROR_CODE_ALREADY_USED
}

type QuestionnaireCompletedNewCustomerResponse {
  questionnaire: QuestionnaireCompletedQuestionnaire!
  customer: CustomerRegistrationResponse!
}

type QuestionnaireCompletedExistingCustomerResponse {
  questionnaire: QuestionnaireCompletedQuestionnaire!
}

input QuestionnaireCompleteInput {
  referenceId: ID!
  type: QuestionnaireType!
  steps: [QuestionnaireCompleteStepInput!]!
  customerNotification: QuestionnaireCustomerNotificationInput
  submissionNotification: QuestionnaireSubmissionNotificationInput
}

input QuestionnaireSubmissionNotificationInput {
  recipients: [Email!]!
}

input QuestionnaireCustomerNotificationInput {
  subject: String!
  text: String!
}

input QuestionnaireCompleteStepInput {
  title: String!
  answers: [QuestionnaireAnswerInput!]!
}

input QuestionnaireAnswerInput {
  question: QuestionnaireQuestionInput!
  answer: QuestionnaireAnswerValueInput!
}

input QuestionnaireQuestionInput {
  referenceId: ID!
  title: String
}

input QuestionnaireAnswerValueInput {
  text: QuestionnaireQuestionTextInput
  number: QuestionnaireQuestionFloatInput
  singleChoice: QuestionnaireQuestionChoiceInput
  multiChoice: [QuestionnaireQuestionChoiceInput!]
}

input QuestionnaireQuestionChoiceInput {
  referenceId: ID!
  layout: QuestionnaireQuestionChoiceLayoutInput!
  behaviour: QuestionnaireQuestionChoiceBehaviourInput
}

input QuestionnaireQuestionChoiceBehaviourInput {
  metalSystemCode: MetalCode
  ringStyleSystemCode: EngagementRingStyleLabelCode
  designStyleSystemCode: EngagementRingDesignStyleLabelCode
  designFeatureSystemCode: EngagementRingDesignFeatureLabelCode
  shape: StoneShapeCode
}

input QuestionnaireQuestionTextInput {
  text: String!
}

input QuestionnaireQuestionFloatInput {
  number: Float!
}

input QuestionnaireQuestionChoiceLayoutInput {
  image: QuestionnaireQuestionChoiceLayoutImageInput
  imageCard: QuestionnaireQuestionChoiceLayoutImageCardInput
  iconCard: QuestionnaireQuestionChoiceLayoutIconCardInput
  text: QuestionnaireQuestionChoiceLayoutTextInput
}

input QuestionnaireQuestionChoiceLayoutImageInput {
  image: Uri!
}

input QuestionnaireQuestionChoiceLayoutImageCardInput {
  image: Uri!
  title: String!
  description: String
}

enum QuestionnaireBackgroundColor {
  SLATE
  GREEN
  TAAFFEITE
  BLUE
  RED
  SAGE
  BLUSH
  STONE
  STONE2
  STONE3
  WHITE
}

input QuestionnaireQuestionChoiceLayoutIconCardInput {
  image: Uri!
  backgroundColor: QuestionnaireBackgroundColor!
  title: String!
  description: String
}

input QuestionnaireQuestionChoiceLayoutTextInput {
  title: String!
  description: String
}

enum QuestionnaireType {
  GUIDED_JOURNEY
  DIAMOND_QUIZ
  INSPIRATION_QUIZ
}

type QuestionnaireQuestionSnapshot {
  referenceId: ID!
  title: String
}

type QuestionnaireCompletedQuestionnaire {
  id: ID!
  referenceId: ID!
  type: QuestionnaireType!
  steps: [QuestionnaireCompletedQuestionnaireStepSnapshot!]!
}

type QuestionnaireCompletedQuestionnaireStepSnapshot {
  id: ID!
  title: String!
  answers: [QuestionnaireAnswer!]!
}

interface QuestionnaireAnswer {
  id: ID!
  question: QuestionnaireQuestionSnapshot!
}

type QuestionnaireQuestionAnswerText implements QuestionnaireAnswer {
  id: ID!
  question: QuestionnaireQuestionSnapshot!
  text: String!
}

type QuestionnaireQuestionAnswerSingleChoice implements QuestionnaireAnswer {
  id: ID!
  question: QuestionnaireQuestionSnapshot!
  choice: QuestionnaireQuestionChoiceOptionSnapshot!
}

type QuestionnaireQuestionAnswerMultiChoice implements QuestionnaireAnswer {
  id: ID!
  question: QuestionnaireQuestionSnapshot!
  choices: [QuestionnaireQuestionChoiceOptionSnapshot!]!
}

type QuestionnaireQuestionAnswerNumber implements QuestionnaireAnswer {
  id: ID!
  question: QuestionnaireQuestionSnapshot!
  number: Float!
}

type QuestionnaireQuestionChoiceOptionSnapshot {
  id: ID!
  referenceId: ID!
  layout: QuestionnaireQuestionChoiceOptionLayoutSnapshot!
}

type QuestionnaireQuestionChoiceOptionLayoutSnapshotIconCard {
  backgroundColor: QuestionnaireBackgroundColor!
  icon: Asset
  title: String!
  description: String
}

type QuestionnaireQuestionChoiceOptionLayoutSnapshotImage {
  icon: Asset
}

type QuestionnaireQuestionChoiceOptionLayoutSnapshotImageCard {
  icon: Asset
  title: String!
  description: String
}

type QuestionnaireQuestionChoiceOptionLayoutSnapshotText {
  title: String!
  description: String
}

union QuestionnaireQuestionChoiceOptionLayoutSnapshot = QuestionnaireQuestionChoiceOptionLayoutSnapshotIconCard | QuestionnaireQuestionChoiceOptionLayoutSnapshotImage | QuestionnaireQuestionChoiceOptionLayoutSnapshotImageCard | QuestionnaireQuestionChoiceOptionLayoutSnapshotText

type Showroom {
  id: ID!
  translation(locale: Locale!): ShowroomTranslation!
  location: ShowroomLocation!
  isAccessible: Boolean!
  timezone: String!
}

type ShowroomTranslation {
  name: String!
}

type ShowroomLocation {
  id: ID!
  postalCode: String
  city: String!
  addressLine1: String!
  addressLine2: String
  country: Country!
  subdivision: CountrySubdivision
  geoLocation: GeoPoint
}

input StoneCrystalsFilterInput {
  category: StoneCategoryCode
}

input StoneGradesFilterInput {
  category: StoneCategoryCode
}

input StoneColorsFilterInput {
  category: StoneCategoryCode
}

input StoneClarityFilterInput {
  category: StoneCategoryCode
}

input StoneShapeFilterInput {
  category: StoneCategoryCode
}

type Stone {
  id: ID!
  crystal: StoneCrystal
  color: StoneColor
  colorGrade: StoneGrade
  cut: StoneCut
  polish: StonePolish
  symmetry: StoneSymmetry
  fluorescence: StoneFluorescence
  clarity: StoneClarity
  shape: StoneShape
  photo: Uri
  ratio: Decimal
  tablePercent: Decimal!
  depthPercent: Decimal!
  caratWeight: Decimal!
  measurements: StoneMeasurements!
  certificate: StoneCertificate
}

type StoneCertificate {
  number: String!
  uri: Uri!
}

type StoneMeasurements {
  width: Decimal!
  depth: Decimal!
  length: Decimal!
}

enum StonePolishCode {
  EXCELLENT
  VERY_GOOD
  GOOD
  FAIR
  IDEAL
}

type StonePolish {
  systemCode: StonePolishCode!
  abbreviation: String!
  translation(locale: Locale!): StonePolishTranslation!
}

type StonePolishTranslation {
  name: String!
}

enum StoneSymmetryCode {
  EXCELLENT
  VERY_GOOD
  GOOD
  FAIR
  IDEAL
}

type StoneSymmetry {
  systemCode: StoneSymmetryCode!
  translation(locale: Locale!): StoneSymmetryTranslation!
}

type StoneSymmetryTranslation {
  name: String!
}

enum StoneFluorescenceCode {
  NONE
  FAINT
  MEDIUM
  STRONG
  VERY_STRONG
}

type StoneFluorescence {
  systemCode: StoneFluorescenceCode!
  translation(locale: Locale!): StoneFluorescenceTranslation!
}

type StoneFluorescenceTranslation {
  name: String!
}

enum StoneShapeCode {
  ROUND
  CUSHION
  PRINCESS
  EMERALD
  OVAL
  ASSCHER
  MARQUISE
  PEAR
  HEART
  HALF_MOON
  STRAIGHT_BAGUETTE
  TAPERED_BAGUETTE
  TRAPEZOID
  TRIANGULAR
  CABOCHON
  RADIANT
  HEXAGONAL
  ROSE
  EUROPEAN
  OLD_MINERS
  CIRCULAR
  OCTAGONAL
  CUSTOM
  TRILLION
  STEP_CUT_TRAPEZOID
  BRILLIANT_CUT_TRAPEZOID
  KITE
  BULLET
  CARRE
  SQUARE_FRENCH
  RECTANGULAR_FRENCH
}

type StoneShape {
  systemCode: StoneShapeCode!
  icon: Asset
  samplePhoto: Asset
  translation(locale: Locale!): StoneShapeTranslation!
}

type StoneShapeTranslation {
  name: String!
}

enum StoneCrystalCode {
  DIAMOND
  FANCY_DIAMOND
  RUBY
  SAPPHIRE
  EMERALD
  TSAVORITE
  SPINEL
  TOURMALINE
  TANZANITE
  AQUAMARINE
  CITRINE
  PERIDOT
  MORGANITE
  TOPAZ
  ALEXANDRITE
  GARNET
  AMETHYST
  LAB_GROWN_DIAMOND
  ZIRCON
}

type StoneCrystal {
  systemCode: StoneCrystalCode!
  translation(locale: Locale!): StoneCrystalTranslation!
}

type StoneCrystalTranslation {
  name: String!
}

enum StoneColorCode {
  DIAMOND_D
  DIAMOND_E
  DIAMOND_F
  DIAMOND_G
  DIAMOND_H
  DIAMOND_I
  DIAMOND_J
  FANCY_DIAMOND_RED
  FANCY_DIAMOND_ORANGISH_RED
  FANCY_DIAMOND_REDDISH_ORANGE
  FANCY_DIAMOND_ORANGE
  FANCY_DIAMOND_YELLOWISH_ORANGE
  FANCY_DIAMOND_YELLOW_ORANGE
  FANCY_DIAMOND_ORANGE_YELLOW
  FANCY_DIAMOND_ORANGISH_YELLOW
  FANCY_DIAMOND_YELLOW
  FANCY_DIAMOND_GREENISH_YELLOW
  FANCY_DIAMOND_GREEN_YELLOW
  FANCY_DIAMOND_YELLOW_GREEN
  FANCY_DIAMOND_YELLOWISH_GREEN
  FANCY_DIAMOND_GREEN
  FANCY_DIAMOND_BLUISH_GREEN
  FANCY_DIAMOND_BLUE_GREEN
  FANCY_DIAMOND_GREEN_BLUE
  FANCY_DIAMOND_GREENISH_BLUE
  FANCY_DIAMOND_BLUE
  FANCY_DIAMOND_VIOLETISH_BLUE
  FANCY_DIAMOND_BLUISH_VIOLET
  FANCY_DIAMOND_VIOLET
  FANCY_DIAMOND_PURPLE
  FANCY_DIAMOND_REDDISH_PURPLE
  FANCY_DIAMOND_RED_PURPLE
  FANCY_DIAMOND_PURPLE_RED
  FANCY_DIAMOND_PURPLISH_RED
  FANCY_DIAMOND_PINKISH_PURPLE
  FANCY_DIAMOND_PINK_PURPLE
  FANCY_DIAMOND_PURPLE_PINK
  FANCY_DIAMOND_PURPLISH_PINK
  FANCY_DIAMOND_PINK
  FANCY_DIAMOND_BROWNISH_PINK
  FANCY_DIAMOND_BROWN_PINK
  FANCY_DIAMOND_PINK_BROWN
  FANCY_DIAMOND_PINKISH_BROWN
  FANCY_DIAMOND_BROWN
  FANCY_DIAMOND_ORANGISH_PINK
  FANCY_DIAMOND_ORANGE_PINK
  FANCY_DIAMOND_PINK_ORANGE
  FANCY_DIAMOND_PINKISH_ORANGE
  FANCY_DIAMOND_ORANGISH_BROWN
  FANCY_DIAMOND_ORANGE_BROWN
  FANCY_DIAMOND_BROWN_ORANGE
  FANCY_DIAMOND_BROWNISH_ORANGE
  FANCY_DIAMOND_YELLOWISH_BROWN
  FANCY_DIAMOND_YELLOW_BROWN
  FANCY_DIAMOND_BROWN_YELLOW
  FANCY_DIAMOND_BROWNISH_YELLOW
  FANCY_DIAMOND_GRAY_GREEN
  FANCY_DIAMOND_GRAY_BLUE
  FANCY_DIAMOND_GRAY_VIOLET
  FANCY_DIAMOND_GRAY_PURPLE
  FANCY_DIAMOND_BROWN_PURPLE
  FANCY_DIAMOND_BLACK
  FANCY_DIAMOND_GRAY
  FANCY_DIAMOND_WHITE
  GEMSTONE_PURPLE
  GEMSTONE_REDDISH_PURPLE
  GEMSTONE_RED_PURPLE
  GEMSTONE_RED
  GEMSTONE_ORANGY_RED
  GEMSTONE_RED_ORANGE
  GEMSTONE_REDDISH_ORANGE
  GEMSTONE_ORANGE
  GEMSTONE_YELLOWISH_ORANGE
  GEMSTONE_ORANGY_YELLOW
  GEMSTONE_YELLOW
  GEMSTONE_GREENISH_YELLOW
  GEMSTONE_YELLOW_GREEN
  GEMSTONE_YELLOWISH_GREEN
  GEMSTONE_GREEN
  GEMSTONE_BLUISH_GREEN
  GEMSTONE_GREEN_BLUE
  GEMSTONE_GREENISH_BLUE
  GEMSTONE_BLUE
  GEMSTONE_VIOLETISH_BLUE
  GEMSTONE_BLUISH_VIOLET
  GEMSTONE_VIOLET
  GEMSTONE_VIOLETISH_PURPLE
  GEMSTONE_PINK
  GEMSTONE_WHITE
  GEMSTONE_ACHROITE_COLOURLESS
  GEMSTONE_CATS_EYE
  GEMSTONE_CANARY_YELLOW
  GEMSTONE_CHROME_DEEP_GREEN
  GEMSTONE_DRAVITE_BROWN
  GEMSTONE_ELBAITE
  GEMSTONE_PARAIBA
  GEMSTONE_SCHORL_BLACK
  GEMSTONE_SIBERITE_PURPLE
  GEMSTONE_VERDELITE_PURPLE
  GEMSTONE_WATERMELON
  GEMSTONE_RUBELLITE
  DIAMOND_K
  FANCY_DIAMOND_ACHRIOTE_COLOURLESS
  FANCY_DIAMOND_BLUE_GRAY
  FANCY_DIAMOND_BLUE_VIOLET
  FANCY_DIAMOND_BLUISH_GRAY
  FANCY_DIAMOND_BROWN_GREEN
  FANCY_DIAMOND_BROWN_RED
  FANCY_DIAMOND_BROWNISH_GREEN
  FANCY_DIAMOND_BROWNISH_PURPLE
  FANCY_DIAMOND_BROWNISH_RED
  FANCY_DIAMOND_CANARY_YELLOW
  FANCY_DIAMOND_CATS_EYE
  FANCY_DIAMOND_CHAMELEON
  FANCY_DIAMOND_CHAMPAGNE
  FANCY_DIAMOND_CHOCOLATE
  FANCY_DIAMOND_CHROME_DEEP_GREEN
  FANCY_DIAMOND_COGNAC
  FANCY_DIAMOND_COLOR_CHANGE
  FANCY_DIAMOND_DRAVITE_BROWN
  FANCY_DIAMOND_ELBAITE
  FANCY_DIAMOND_GRAYISH_BLUE
  FANCY_DIAMOND_GRAYISH_GREEN
  FANCY_DIAMOND_GRAYISH_PURPLE
  FANCY_DIAMOND_GRAYISH_VIOLET
  FANCY_DIAMOND_GREEN_BROWN
  FANCY_DIAMOND_GREEN_GRAY
  FANCY_DIAMOND_GREENISH_BROWN
  FANCY_DIAMOND_GREENISH_GRAY
  FANCY_DIAMOND_ORANGE_RED
  FANCY_DIAMOND_ORANGY_BROWN
  FANCY_DIAMOND_ORANGY_PINK
  FANCY_DIAMOND_ORANGY_RED
  FANCY_DIAMOND_ORANGY_YELLOW
  FANCY_DIAMOND_PADPARADSCHA
  FANCY_DIAMOND_PARAIBA
  FANCY_DIAMOND_PEACH
  FANCY_DIAMOND_PINKISH_RED
  FANCY_DIAMOND_PURPLE_GRAY
  FANCY_DIAMOND_PURPLISH_GRAY
  FANCY_DIAMOND_RED_BROWN
  FANCY_DIAMOND_RED_ORANGE
  FANCY_DIAMOND_REDDISH_BROWN
  FANCY_DIAMOND_RUBELLITE
  FANCY_DIAMOND_SCHORL_BLACK
  FANCY_DIAMOND_SIBERITE_PURPLE
  FANCY_DIAMOND_TEAL
  FANCY_DIAMOND_TURQUOISE
  FANCY_DIAMOND_VERDELITE_PURPLE
  FANCY_DIAMOND_VIOLET_BLUE
  FANCY_DIAMOND_VIOLET_GRAY
  FANCY_DIAMOND_VIOLETISH_GRAY
  FANCY_DIAMOND_WATERMELON
  FANCY_DIAMOND_YELLOW_GRAY
  FANCY_DIAMOND_YELLOWISH_GRAY
  GEMSTONE_BLACK
  GEMSTONE_BLUE_GREEN
  GEMSTONE_BLUE_GRAY
  GEMSTONE_BLUE_VIOLET
  GEMSTONE_BLUISH_GRAY
  GEMSTONE_BROWN
  GEMSTONE_BROWN_GREEN
  GEMSTONE_BROWN_ORANGE
  GEMSTONE_BROWN_PINK
  GEMSTONE_BROWN_PURPLE
  GEMSTONE_BROWN_RED
  GEMSTONE_BROWN_YELLOW
  GEMSTONE_BROWNISH_GREEN
  GEMSTONE_BROWNISH_ORANGE
  GEMSTONE_BROWNISH_PINK
  GEMSTONE_BROWNISH_PURPLE
  GEMSTONE_BROWNISH_RED
  GEMSTONE_BROWNISH_YELLOW
  GEMSTONE_CHAMELEON
  GEMSTONE_CHAMPAGNE
  GEMSTONE_CHOCOLATE
  GEMSTONE_COGNAC
  GEMSTONE_COLOR_CHANGE
  GEMSTONE_GREEN_BROWN
  GEMSTONE_GREEN_GRAY
  GEMSTONE_GREEN_YELLOW
  GEMSTONE_GREENISH_BROWN
  GEMSTONE_GREENISH_GRAY
  GEMSTONE_GRAY
  GEMSTONE_GRAY_BLUE
  GEMSTONE_GRAY_GREEN
  GEMSTONE_GRAY_GREENISH_YELLOW
  GEMSTONE_GRAY_PURPLE
  GEMSTONE_GRAY_VIOLET
  GEMSTONE_GRAY_YELLOWISH_GREEN
  GEMSTONE_GRAYISH_GREEN
  GEMSTONE_GRAYISH_PURPLE
  GEMSTONE_GRAYISH_VIOLET
  GEMSTONE_ORANGE_BROWN
  GEMSTONE_ORANGE_PINK
  GEMSTONE_ORANGE_RED
  GEMSTONE_ORANGE_YELLOW
  GEMSTONE_ORANGY_BROWN
  GEMSTONE_ORANGY_PINK
  GEMSTONE_PADPARADSCHA
  GEMSTONE_PEACH
  GEMSTONE_PINK_BROWN
  GEMSTONE_PINK_PURPLE
  GEMSTONE_PINKISH_BROWN
  GEMSTONE_PINKISH_PURPLE
  GEMSTONE_PINKISH_RED
  GEMSTONE_PURPLE_PINK
  GEMSTONE_PURPLE_RED
  GEMSTONE_PURPLE_GRAY
  GEMSTONE_PURPLISH_GRAY
  GEMSTONE_PURPLISH_PINK
  GEMSTONE_PURPLISH_RED
  GEMSTONE_RED_BROWN
  GEMSTONE_REDDISH_BROWN
  GEMSTONE_TEAL
  GEMSTONE_TURQUOISE
  GEMSTONE_VIOLET_BLUE
  GEMSTONE_VIOLET_GRAY
  GEMSTONE_VIOLETISH_GRAY
  GEMSTONE_YELLOW_GRAY
  GEMSTONE_YELLOW_BROWN
  GEMSTONE_YELLOW_ORANGE
  GEMSTONE_BI_COLOUR
  GEMSTONE_YELLOWISH_BROWN
  GEMSTONE_YELLOWISH_GRAY
  DIAMOND_L
  DIAMOND_M
}

type StoneColor {
  systemCode: StoneColorCode!
  translation(locale: Locale!): StoneColorTranslation!
}

type StoneColorTranslation {
  name: String!
}

enum StoneCutCode {
  EXCELLENT
  VERY_GOOD
  GOOD
  IDEAL
}

type StoneCut {
  systemCode: StoneCutCode!
  translation(locale: Locale!): StoneCutTranslation!
}

type StoneCutTranslation {
  name: String!
}

enum StoneClarityCode {
  DIAMOND_FL
  DIAMOND_IF
  DIAMOND_VVS1
  DIAMOND_VVS2
  DIAMOND_VS1
  DIAMOND_VS2
  DIAMOND_SI1
  DIAMOND_SI2
  GEMSTONE_SLIGHTLY_INCLUDED
  GEMSTONE_INCLUDED
  GEMSTONE_EYE_CLEAN
  GEMSTONE_LOUPE_CLEAN
}

type StoneClarity {
  systemCode: StoneClarityCode!
  abbreviation: String!
  translation(locale: Locale!): StoneClarityTranslation!
}

type StoneClarityTranslation {
  name: String!
}

type Melee {
  id: ID!
  caratWeight: Decimal!
  crystal: StoneCrystal!
  shape: StoneShape!
  colors: [StoneColor!]!
  clarities: [StoneClarity!]!
  grade: StoneGrade
  width: String!
}

enum StoneGradeCode {
  FANCY_DIAMOND_FAINT
  FANCY_DIAMOND_VERY_LIGHT
  FANCY_DIAMOND_LIGHT
  FANCY_DIAMOND_FANCY_LIGHT
  FANCY_DIAMOND_FANCY
  FANCY_DIAMOND_FANCY_INTENSE
  FANCY_DIAMOND_FANCY_DARK
  FANCY_DIAMOND_FANCY_DEEP
  FANCY_DIAMOND_FANCY_VIVID
  GEMSTONE_VERY_LIGHT
  GEMSTONE_LIGHT
  GEMSTONE_MEDIUM_LIGHT
  GEMSTONE_MEDIUM
  GEMSTONE_MEDIUM_DARK
  GEMSTONE_DARK
  GEMSTONE_VERY_DARK
  GEMSTONE_HOT
}

type StoneGrade {
  systemCode: StoneGradeCode!
  translation(locale: Locale!): StoneGradeTranslation!
  category: StoneCategory!
}

type StoneGradeTranslation {
  name: String!
}

enum StoneCategoryCode {
  DIAMOND
  FANCY_DIAMOND
  GEMSTONE
  LAB_GROWN_DIAMOND
}

type StoneCategory {
  systemCode: StoneCategoryCode!
  translation(locale: Locale!): StoneCategoryTranslation!
}

type StoneCategoryTranslation {
  name: String!
}

enum GemType {
  NATURAL_DIAMOND
  LAB_GROWN_DIAMOND
}

scalar Locale

type Language {
  locale: Locale!
  translations: [Translation!]!
}

type Translation {
  token: ID!
  translation: String!
}

type DesignInspiration {
  id: ID!
  url: String!
}

type Customer {
  id: ID!
  shippingAddress: Address
  billingAddress: Address
  disabledThirdPartyCookies: Boolean!
  designInspiration: DesignInspiration
  user: User!
  ordersByConsultationPurpose(purpose: BookingConsultationPurposeCode!): [Order!]!
  consultant: Consultant
  cart: Order!
  orders: [Order!]!
  order(id: ID!): Order
  questionnaireByType(type: QuestionnaireType!): QuestionnaireCompletedQuestionnaire
  enquiries: [Enquiry!]!
  designStudioProducts: [DesignStudioProduct!]!
  designStudioProduct(id: ID!): DesignStudioProduct
  engagementRingRecommendations: UserCustomerEngagementRingRecommendations
}

type Address {
  country: Country
  phoneNumber: PhoneNumberType
}

type MagicLinkConsumeSuccess {
  login: LoginResponseSuccess!
}

type MagicLinkConsumeError {
  message: String!
}

union MagicLinkConsumeResponse = MagicLinkConsumeSuccess | MagicLinkConsumeError

input MagicLinkConsume {
  email: Email!
  hash: String!
  expires: Int!
}

input MagicLinkRequest {
  redirect: Uri!
  email: Email!
}

type CustomerRegistrationResponse {
  login: LoginResponseSuccess
}

input CustomerRegistrationInput {
  byManual: CustomerRegistrationByManualInput
  byGoogle: CustomerRegistrationByGoogleInput
}

input CustomerRegistrationByManualInput {
  firstName: String!
  lastName: String
  email: Email!
  phone: PhoneNumberInput
  region: RegionCode!
  currency: CurrencyInput!
  emailConsent: Boolean!
  privacyConsent: Boolean!
  forgottenPasswordUrl: Uri!
}

input CustomerRegistrationByGoogleInput {
  token: String!
  region: RegionCode!
  currency: CurrencyInput!
  phone: PhoneNumberInput
  forgottenPasswordUrl: Uri!
}

type User {
  id: ID!
  email: Email!
  firstName: String!
  lastName: String!
  createdAt: DateTime!
  isConsultant: Boolean!
  customer: Customer
}

input CredentialsInput {
  identifier: Email!
  password: String!
}

union LoginResponse = LoginResponseSuccess | LoginResponseFailure

type LoginResponseFailure {
  message(locale: Locale!): String!
  code: LoginResponseErrorCode!
}

enum LoginResponseErrorCode {
  INVALID_CREDENTIALS
}

type LoginResponseSuccess {
  jwt: String!
  refreshToken: String!
  user: User!
}

input EnquiryDiamondSearchProduct {
  uri: Uri!
  gemsApiStoneIdentifier: ID!
  currency: CurrencyInput!
  region: RegionCode!
  baseInput: EnquiryBaseInput
  commissionJunction: CommissionJunctionInput
}

input EnquiryEngagementRingCollectionInput {
  uri: Uri!
  catalogueEngagementRingFilter: CatalogueEngagementRingFilterInput!
  baseInput: EnquiryBaseInput
  commissionJunction: CommissionJunctionInput
}

input EnquiryCustomEngagementRing {
  catalogueEngagementRingFilter: CatalogueEngagementRingFilterInput!
  uri: Uri!
  baseInput: EnquiryBaseInput
  commissionJunction: CommissionJunctionInput
}

input EnquiryInput {
  uri: Uri!
  type: EnquiryType!
  image: EnquiryImageInput
  baseInput: EnquiryBaseInput
  commissionJunction: CommissionJunctionInput
}

input EnquiryImageInput {
  uri: Uri!
  name: String!
}

input EnquiryContactUsInput {
  uri: Uri!
  purpose: EnquiryContactUsEnquiryPurpose!
  instructions: String!
  baseInput: EnquiryBaseInput
  commissionJunction: CommissionJunctionInput
}

enum EnquiryContactUsEnquiryPurpose {
  PRODUCT
  RETURNING
  AFTERCARE
}

type EnquiryResponseExistingCustomer {
  marketingCloudForm: String!
}

type EnquiryResponseNewCustomer {
  customer: CustomerRegistrationResponse!
  marketingCloudForm: String!
}

enum EnquiryType {
  ENGAGEMENT_RING
  WEDDING_RING
  BLOG_POST
  WEDDING_RING_BESPOKE_LANDING
  JEWELLERY_PRODUCT_LANDING_GENERIC
  ENGAGEMENT_RING_BROWSE
}

union Enquiry = EnquiryConsultation | EnquiryWeddingRingAddToCart | EnquiryEngagementRingAddToCart

type EnquiryConsultation {
  id: ID!
  consultation: BookingConsultation!
}

type EnquiryWeddingRingAddToCart {
  product: DesignStudioProductWeddingRing!
}

type EnquiryEngagementRingAddToCart {
  product: DesignStudioProductEngagementRing!
}

input EnquiryBaseInput {
  uri: Uri!
  region: RegionCode!
  currency: CurrencyInput!
}

type GemsApiPriceBounds {
  min: Float
  max: Float
}

input ConvertPriceBoundsForGems {
  region: RegionCode!
  currency: CurrencyInput!
  min: Decimal
  max: Decimal
}

input CalculateGemsApiStoneTotalSalePriceInput {
  priceUsd: Float!
  region: RegionCode!
  currency: CurrencyInput!
}

input NonSkuLabGrownPricingCellFilters {
  gradeDimensionId: ID
}

input NonSkuGemStonesPricingCellFilters {
  colorCrystalDimensionId: ID
  gradeClarityDimensionId: ID
}

type NonSkuGemstoneImage {
  id: ID!
  image: NonSkuImage
  shapeDimension: NonSkuGemstoneShapeDimension
  colorCrystalDimension: NonSkuGemstoneType
}

type NonSkuGemstoneCaratDimension {
  id: ID!
  caratWeight: Decimal!
}

type NonSkuGemstoneShapeDimension {
  id: ID!
  shape: StoneShape!
}

type NonSkuGemstoneGradeClarityDimension {
  id: ID!
  grade: StoneGrade!
  clarity: StoneClarity!
}

input NonSkuLabGrownShapeDimensionUpdateInput {
  image: Upload
}

input NonSkuGemstoneImageUpdateInput {
  image: Upload
}

input NonSkuGemstoneImageCreateInput {
  colorCrystalDimensionId: ID!
  shapeDimensionId: ID!
  image: Upload
}

input NonSkuGemStoneCreateInput {
  caratDimensionId: ID!
  colorCrystalDimensionId: ID!
  gradeClarityDimensionId: ID!
  shapeDimensionId: ID!
  image: Upload
}

input NonSkuGemstoneCaratDimensionCreateInput {
  caratWeight: Decimal!
}

input NonSkuGemstoneColorCrystalDimensionCreateInput {
  color: StoneColorCode!
  crystal: StoneCrystalCode!
}

input NonSkuGemstoneGradeClarityDimensionCreateInput {
  grade: StoneGradeCode!
  clarity: StoneClarityCode!
}

input NonSkuGemstoneShapeDimensionCreateInput {
  shape: StoneShapeCode!
}

input NonSkuLabGrownDiamondCreateInput {
  gradeDimensionId: ID!
  shapeDimensionId: ID!
  caratDimensionId: ID!
  image: Upload
}

input NonSkuLabGrownCaratDimensionCreateInput {
  caratWeight: Decimal!
}

input NonSkuLabGrownShapeDimensionCreateInput {
  shape: StoneShapeCode!
  image: Upload
}

input NonSkuLabGrownGradeDimensionCreateInput {
  color: StoneColorCode!
  clarity: StoneClarityCode!
}

type NonSkuImage {
  id: ID!
  url: Uri!
  mimeType: String!
  sources: [ImageSrc!]!
  size(name: ImageSizeName!): ImageSize!
}

type NonSkuLabGrownGradeDimension {
  id: ID!
  clarity: StoneClarity!
  color: StoneColor!
}

type NonSkuLabGrownShapeDimension {
  id: ID!
  shape: StoneShape!
  image: NonSkuImage
}

type NonSkuLabGrownCaratDimension {
  id: ID!
  caratWeight: Decimal!
}

input NonSkuGemstoneFilters {
  shape: StoneShapeCode
  priceRange: NonSkuPriceRangeInput
  caratWeightRange: NonSkuCaratWeightRangeInput
  crystals: [StoneCrystalCode!]
  colors: [StoneColorCode!]
}

input NonSkuGemstoneSortInput {
  field: NonSkuGemstoneSortField!
  direction: NonSkuSortDirection! = ASC
}

enum NonSkuGemstoneSortField {
  PRICE
  CARAT
}

type NonSkuGemstonesBounds {
  price(region: RegionCode!, currency: CurrencyInput!): NonSkuPriceRange
  caratWeight: NonSkuCaratWeightRange!
  shapes: [StoneShape!]!
  types: [NonSkuGemstoneType!]!
}

type NonSkuGemstoneType {
  id: ID!
  color: StoneColor!
  crystal: StoneCrystal!
}

input NonSkuCaratWeightRangeInput {
  min: Decimal
  max: Decimal
}

type NonSkuPriceRange {
  min: Money!
  max: Money!
}

type NonSkuCaratWeightRange {
  min: Decimal!
  max: Decimal!
}

type NonSkuLabGrownDiamondsBounds {
  price(region: RegionCode!, currency: CurrencyInput!): NonSkuPriceRange
  caratWeight: NonSkuCaratWeightRange!
  shapes: [StoneShape!]!
  colors: [StoneColor!]!
}

input NonSkuLabGrownDiamondSortInput {
  field: NonSkuLabGrownSortField!
  direction: NonSkuSortDirection! = ASC
}

enum NonSkuSortDirection {
  ASC
  DESC
}

enum NonSkuLabGrownSortField {
  PRICE
  CARAT
}

input NonSkuPriceRangeInput {
  min: MoneyInput
  max: MoneyInput
}

input NonSkuLabGrownDiamondsFilters {
  shape: StoneShapeCode
  priceRange: NonSkuPriceRangeInput
  caratWeightRange: NonSkuCaratWeightRangeInput
  colors: [StoneColorCode!]
}

input NonSkuLabGrownDiamondFilterInput {
  shape: StoneShapeCode!
  color: StoneColorCode!
  clarity: StoneClarityCode!
  carat: Decimal!
}

input NonSkuGemstoneFilterInput {
  shape: StoneShapeCode!
  grade: StoneGradeCode!
  clarity: StoneClarityCode!
  color: StoneColorCode!
  crystal: StoneCrystalCode!
  carat: Decimal!
}

interface NonSkuInterface {
  shape: StoneShape!
  caratWeight: Decimal!
  image: NonSkuImage
}

union HistoricalNonSku = HistoricalNonSkuLabGrown | HistoricalNonSkuGemstone

interface NonSkuLabGrownInterface {
  color: StoneColor!
  clarity: StoneClarity!
}

interface NonSkuGemStoneInterface {
  cut: StoneCut!
  caratWeight: Decimal!
  crystal: StoneCrystal!
  colorGrade: StoneGrade!
  color: StoneColor!
  clarity: StoneClarity!
}

type HistoricalNonSkuLabGrown implements NonSkuLabGrownInterface & NonSkuInterface {
  id: ID!
  shape: StoneShape!
  salePrice(region: RegionCode!, currency: CurrencyInput!): Money!
  caratWeight: Decimal!
  color: StoneColor!
  clarity: StoneClarity!
  image: NonSkuImage
}

type NonSkuLabGrown implements NonSkuLabGrownInterface & NonSkuInterface {
  id: ID!
  salePrice(region: RegionCode!, currency: CurrencyInput!): Money
  shape: StoneShape!
  caratWeight: Decimal!
  color: StoneColor!
  clarity: StoneClarity!
  image: NonSkuImage
  uniqueImage: NonSkuImage
  sampleImage: NonSkuImage
  shapeDimension: NonSkuLabGrownShapeDimension!
  gradeDimension: NonSkuLabGrownGradeDimension!
  caratDimension: NonSkuLabGrownCaratDimension!
}

type HistoricalNonSkuGemstone implements NonSkuGemStoneInterface & NonSkuInterface {
  id: ID!
  shape: StoneShape!
  salePrice(region: RegionCode!, currency: CurrencyInput!): Money!
  cut: StoneCut!
  caratWeight: Decimal!
  crystal: StoneCrystal!
  colorGrade: StoneGrade!
  color: StoneColor!
  clarity: StoneClarity!
  image: NonSkuImage
}

type NonSkuGemstone implements NonSkuGemStoneInterface & NonSkuInterface {
  id: ID!
  shape: StoneShape!
  salePrice(region: RegionCode!, currency: CurrencyInput!): Money
  cut: StoneCut!
  caratWeight: Decimal!
  crystal: StoneCrystal!
  colorGrade: StoneGrade!
  color: StoneColor!
  clarity: StoneClarity!
  image: NonSkuImage
  uniqueImage: NonSkuImage
  sampleImage: NonSkuImage
  shapeDimension: NonSkuGemstoneShapeDimension!
  gradeClarityDimension: NonSkuGemstoneGradeClarityDimension!
  caratDimension: NonSkuGemstoneCaratDimension!
  colorCrystalDimension: NonSkuGemstoneType!
}

input DesignStudioQuotationEngagementRingUpdate {
  ringApproved: Boolean
  stoneApproved: Boolean
}

input DesignStudioProductEngagementRingUpdate {
  size: RingSizeInput
  engraving: String
}

input DesignStudioProductWeddingRingUpdate {
  size: RingSizeInput
  engraving: String
}

interface DesignStudioProduct {
  id: ID!
  name: String!
  isAutofinalizable: Boolean!
  quotations: [Quotation!]!
  finalQuotation: Quotation
  cantBeReturned: Boolean!
  cantBeResized: Boolean!
  orderProduct: OrderProduct!
}

type DesignStudioProductLooseStone implements DesignStudioProduct {
  id: ID!
  name: String!
  isAutofinalizable: Boolean!
  quotations: [Quotation!]!
  finalQuotation: Quotation
  cantBeReturned: Boolean!
  cantBeResized: Boolean!
  orderProduct: OrderProduct!
}

type DesignStudioProductAdditionalResize implements DesignStudioProduct {
  id: ID!
  name: String!
  isAutofinalizable: Boolean!
  quotations: [Quotation!]!
  finalQuotation: Quotation
  cantBeReturned: Boolean!
  cantBeResized: Boolean!
  orderProduct: OrderProduct!
}

type DesignStudioProductCustom implements DesignStudioProduct {
  id: ID!
  name: String!
  isAutofinalizable: Boolean!
  quotations: [Quotation!]!
  finalQuotation: Quotation
  cantBeReturned: Boolean!
  cantBeResized: Boolean!
  orderProduct: OrderProduct!
}

type DesignStudioProductGeneric implements DesignStudioProduct {
  id: ID!
  name: String!
  isAutofinalizable: Boolean!
  quotations: [Quotation!]!
  finalQuotation: Quotation
  cantBeReturned: Boolean!
  cantBeResized: Boolean!
  orderProduct: OrderProduct!
  customer: Customer!
}

type DesignStudioProductEngagementRing implements DesignStudioProduct {
  id: ID!
  name: String!
  isAutofinalizable: Boolean!
  quotations: [QuotationEngagementRing!]!
  finalQuotation: Quotation
  cantBeReturned: Boolean!
  cantBeResized: Boolean!
  size: RingSizeOrRecommendedRingSize
  availableSizes: [RingSizeOrRecommendedRingSize!]!
  engraving: String
  orderProduct: OrderProduct!
}

type DesignStudioMeleeItem {
  id: ID!
  melee: Melee!
  quantity: Int!
}

type DesignStudioProductWeddingRing implements DesignStudioProduct {
  id: ID!
  name: String!
  isAutofinalizable: Boolean!
  quotations: [QuotationWeddingRing!]!
  finalQuotation: Quotation
  cantBeReturned: Boolean!
  cantBeResized: Boolean!
  size: RingSizeOrRecommendedRingSize
  availableSizes: [RingSizeOrRecommendedRingSize!]!
  engraving: String
  orderProduct: OrderProduct!
}

interface Quotation {
  id: ID!
  customName: String
  finalUntil: DateTime
  image: Uri
  images: [Uri!]!
  totalSalePrice: Money!
  isVatApplicable: Boolean!
  isSalesTaxApplicable: Boolean!
  baseTemplate: String
  isRecommended: Boolean!
  firstAvailableDeliveryDate: DeliveryDate!
}

type QuotationManualSurcharge {
  id: ID!
  description: String
  amount: Money!
}

type QuotationPercentageSurcharge {
  id: ID!
  description: String
  percent: Decimal!
}

type QuotationEngagementRing implements Quotation {
  id: ID!
  customName: String
  finalUntil: DateTime
  image: Uri
  images: [Uri!]!
  totalSalePrice: Money!
  isVatApplicable: Boolean!
  isSalesTaxApplicable: Boolean!
  baseTemplate: String
  isRecommended: Boolean!
  mount: DesignStudioEngagementRingMount!
  centreStone: DesignStudioEngagementRingCentreStone!
  firstAvailableDeliveryDate: DeliveryDate!
}

type DesignStudioExternalSideStone {
  id: ID!
  weight: Decimal
  crystal: StoneCrystal
}

type DesignStudioExternalCentreStone {
  id: ID!
  weight: Decimal
  crystal: StoneCrystal
}

type DesignStudioInternalSideStone {
  id: ID!
  quantity: Int!
  item: DesignStudioSideStoneItem!
}

union DesignStudioSideStone = DesignStudioInternalSideStone | DesignStudioExternalSideStone

union DesignStudioSideStoneItem = Stone | Melee

type DesignStudioSignatureStone {
  id: ID!
  melee: Melee!
}

type DesignStudioEngagementRingMount {
  id: ID!
  salePrice: Money!
  manualSurcharges: [QuotationManualSurcharge!]!
  percentageSurcharge: QuotationPercentageSurcharge
  metals: [Metal!]!
  approved: Boolean!
  sideStones: [DesignStudioSideStone!]!
  melees: [DesignStudioMeleeItem!]!
  signatureStones: [DesignStudioSignatureStone!]!
  comment: String
}

type DesignStudioEngagementRingCentreStone {
  id: ID!
  stone: DesignStudioCentreStone!
  salePrice: Money!
  manualSurcharges: [QuotationManualSurcharge!]!
  percentageSurcharge: QuotationPercentageSurcharge
  approved: Boolean!
  comment: String
}

union DesignStudioCentreStone = DesignStudioInternalCentreStone | DesignStudioExternalCentreStone

type DesignStudioInternalCentreStone {
  id: ID!
  nonSku: HistoricalNonSku
  sku: Stone
}

type QuotationWeddingRing implements Quotation {
  id: ID!
  customName: String
  finalUntil: DateTime
  image: Uri
  images: [Uri!]!
  totalSalePrice: Money!
  isVatApplicable: Boolean!
  isSalesTaxApplicable: Boolean!
  baseTemplate: String
  signatureStones: [DesignStudioSignatureStone!]!
  manualSurcharges: [QuotationManualSurcharge!]!
  percentageSurcharge: QuotationPercentageSurcharge
  isRecommended: Boolean!
  comment: String
  metals: [Metal!]!
  firstAvailableDeliveryDate: DeliveryDate!
}

union CatalogueDesignStudioCheckoutWeddingRingNewCustomerResponse = CatalogueDesignStudioCheckoutWeddingRingSuccessNewCustomer

union CatalogueDesignStudioCheckoutWeddingRingExistingCustomerResponse = CatalogueDesignStudioCheckoutWeddingRingSuccessExistingCustomer

type CatalogueDesignStudioCheckoutWeddingRingSuccessNewCustomer {
  order: Order!
  product: OrderProduct!
  customer: CustomerRegistrationResponse!
}

type CatalogueDesignStudioCheckoutWeddingRingSuccessExistingCustomer {
  order: Order!
  product: OrderProduct!
}

union CatalogueDesignStudioCheckoutJewelleryNewCustomerResponse = CatalogueDesignStudioCheckoutJewellerySuccessNewCustomer

union CatalogueDesignStudioCheckoutJewelleryExistingCustomerResponse = CatalogueDesignStudioCheckoutJewellerySuccessExistingCustomer

type CatalogueDesignStudioCheckoutJewellerySuccessNewCustomer {
  order: Order!
  product: OrderProduct!
  customer: CustomerRegistrationResponse!
}

type CatalogueDesignStudioCheckoutJewellerySuccessExistingCustomer {
  order: Order!
  product: OrderProduct!
}

union CatalogueDesignStudioCheckoutEngagementRingSuccess = CatalogueDesignStudioCheckoutEngagementRingAddedToDesignStudioAndCart | CatalogueDesignStudioCheckoutEngagementRingAddedToDesignStudio

type CatalogueDesignStudioCheckoutEngagementRingAddedToDesignStudio {
  product: DesignStudioProductEngagementRing!
}

type CatalogueDesignStudioCheckoutEngagementRingAddedToDesignStudioAndCart {
  order: Order!
  checkoutProduct: OrderProduct!
  designStudioProduct: DesignStudioProductEngagementRing!
}

input AddToCartReadyToGoRingInput {
  catalogueReadyToGoRingCode: ID!
  recommendedRingSizeId: ID
  commissionJunction: CommissionJunctionInput
  uri: Uri!
  baseInput: EnquiryBaseInput
}

union AddToCartReadyToGoRingNewCustomerResponse = AddToCartReadyToGoRingSuccessNewCustomer

union AddToCartReadyToGoRingExistingCustomerResponse = AddToCartReadyToGoRingSuccessExistingCustomer

type AddToCartReadyToGoRingSuccessNewCustomer {
  order: Order!
  product: OrderProduct!
  customer: CustomerRegistrationResponse!
}

type AddToCartReadyToGoRingSuccessExistingCustomer {
  order: Order!
  product: OrderProduct!
}

type StoneRecommendationNotFound {
  haveWithoutPricingRange: Boolean!
}

union StoneRecommendationNonSkuLabGrownItem = NonSkuLabGrown | StoneRecommendationNotFound

union StoneRecommendationNonSkuGemstoneItem = NonSkuGemstone | StoneRecommendationNotFound

type StoneRecommendationNonSkuGemstone {
  color: StoneColor!
  item: StoneRecommendationNonSkuGemstoneItem!
}

union StoneRecommendationsResponse = StoneRecommendationsResponseSuccess | StoneRecommendationsResponseFailure

type StoneRecommendationsResponseFailure {
  error: StoneRecommendationsResponseError
}

enum StoneRecommendationsResponseError {
  MOUNT_MISSING
}

type StoneRecommendationsResponseSuccess {
  priceBounds: StoneRecommendationsPriceRange!
  priceInitialValues: StoneRecommendationsPriceRange!
  naturalDiamondBestForBalanceFilters: StoneRecommendationsNaturalDiamondFilters!
  naturalDiamondBestForSizeFilters: StoneRecommendationsNaturalDiamondFilters!
  nonSkuLabGrownBestForPrice: StoneRecommendationNonSkuLabGrownItem!
  nonSkuLabGrownBestForSize: StoneRecommendationNonSkuLabGrownItem!
  nonSkuGemStones: [StoneRecommendationNonSkuGemstone!]!
}

type StoneRecommendationsPriceRange {
  min: Money!
  max: Money!
}

type StoneRecommendationsNaturalDiamondFilters {
  region: Region!
  shape: StoneShape!
  minCaratWeight: Decimal!
  maxCaratWeight: Decimal!
  tablePercentRange: StoneRecommendationsPercentRange
  depthPercentRange: StoneRecommendationsPercentRange
  cuts: [StoneCut!]!
  polishes: [StonePolish!]!
  symmetries: [StoneSymmetry!]!
  fluorescences: [StoneFluorescence!]!
  clarities: [StoneClarity!]!
  colors: [StoneColor!]!
  priceMin(currency: CurrencyInput!): Money!
  priceMax(currency: CurrencyInput!): Money!
}

type StoneRecommendationsPercentRange {
  min: Int!
  max: Int!
}

type CatalogueDesignStudioEngagementRingValidationResult {
  engagementRing: CatalogueEngagementRing
  centreStone: CatalogueDesignStudioEngagementRingCentreStone
  failure: DesignStudioEngagementRingFailure
}

union CatalogueDesignStudioEngagementRingCentreStone = NonSkuGemstone | NonSkuLabGrown | GemsApiStone

type GemsApiStone {
  identifier: ID!
}

input DesignStudioEngagementRingCentreStoneInput {
  gemsApiIdentifier: ID
  nonSkuLabGrownFilter: NonSkuLabGrownDiamondFilterInput
  nonSkuGemStoneFilter: NonSkuGemstoneFilterInput
}

union DesignStudioEngagementRingError = DesignStudioEngagementRingErrorShapeMismatch | DesignStudioEngagementRingErrorMinCaratWeight | DesignStudioEngagementRingErrorMaxCaratWeight

type DesignStudioEngagementRingErrorShapeMismatch {
  message(locale: Locale!): String!
  matchingVariation: CatalogueEngagementRing
}

type DesignStudioEngagementRingErrorMinCaratWeight {
  message(locale: Locale!): String!
}

type DesignStudioEngagementRingErrorMaxCaratWeight {
  message(locale: Locale!): String!
}

type DesignStudioEngagementRingFailure {
  errors: [DesignStudioEngagementRingError!]!
}

input DesignStudioWeddingRingInput {
  catalogueWeddingRingCode: ID!
  ringSize: RingSizeInput!
  engraving: String
  commissionJunction: CommissionJunctionInput
  uri: Uri!
  baseInput: EnquiryBaseInput
}

input DesignStudioJewelleryInput {
  catalogueJewelleryCode: ID!
  engraving: String
  commissionJunction: CommissionJunctionInput
  uri: Uri!
  baseInput: EnquiryBaseInput
}

type UserCustomerEngagementRingRecommendations {
  items(page: Int! = 1, limit: Int! = 10): [CatalogueEngagementRing!]!
  metal: Metal
  ringStyle: EngagementRingStyleLabel
  designStyle: EngagementRingDesignStyleLabel
  designFeature: EngagementRingDesignFeatureLabel
  shape: StoneShape
}

input RingBuilderGetInput {
  region: RegionCode!
  currency: CurrencyInput!
}

union RingBuilderResolvedNewCustomer = RingBuilderResolvedNewCustomerSuccess | RingBuilderResolvedFailure

union RingBuilderResolvedExistingCustomer = RingBuilderResolvedExistingCustomerSuccess | RingBuilderResolvedFailure

union RingBuilderResolveResult = CatalogueDesignStudioCheckoutEngagementRingAddedToDesignStudioAndCart | CatalogueDesignStudioCheckoutEngagementRingAddedToDesignStudio | DesignStudioEngagementRingFailure

type RingBuilderResolvedFailure {
  errors: [RingBuilderResolvedFailureError!]!
}

enum RingBuilderResolvedFailureError {
  MOUNT_MISSING
  CENTRE_STONE_MISSING
}

type RingBuilderResolvedNewCustomerSuccess {
  customer: CustomerRegistrationResponse!
  ringBuilder: RingBuilder!
  data: RingBuilderResolveResult!
}

type RingBuilderResolvedExistingCustomerSuccess {
  ringBuilder: RingBuilder!
  data: RingBuilderResolveResult!
}

enum RingBuilderResolveMode {
  ENQUIRY
  ADD_TO_CART
  CUSTOMIZE
}

input RingBuilderResolveInput {
  """THIS WILL BECOME REQUIRED"""
  getInput: RingBuilderGetInput
  mode: RingBuilderResolveMode!
  ringSize: RingSizeInput!
  engraving: String
  commissionJunction: CommissionJunctionInput
  region: RegionCode!
  uri: Uri!
  centreStoneUri: Uri!
  currency: CurrencyInput!
  baseInput: EnquiryBaseInput
}

input RingBuilderInput {
  """THIS WILL BECOME REQUIRED"""
  getInput: RingBuilderGetInput
  mount: RingBuilderMountFragmentInput
  centreStone: RingBuilderCentreStoneFragmentInput
}

input RingBuilderMountFragmentInput {
  engagementRing: CatalogueEngagementRingFilterInput
  signatureStone: CatalogueEngagementRingSignatureStoneInput
}

input RingBuilderCentreStoneFragmentInput {
  nonSkuLabGrownDiamond: NonSkuLabGrownDiamondFilterInput
  nonSkuGemstone: NonSkuGemstoneFilterInput
  gemsApiIdentifier: ID
}

type RingBuilder {
  id: ID!
  position1: RingBuilderFragment
  position2: RingBuilderFragment
  totalSalePrice(region: RegionCode!, currency: CurrencyInput!): Money!
  failure: DesignStudioEngagementRingFailure
  financeOptionsAffirm(region: RegionCode!, currency: CurrencyInput!): AffirmFinanceOption
  financeOptionsKlarna(region: RegionCode!, currency: CurrencyInput!): KlarnaFinanceOption
  stoneRecommendations(region: RegionCode!, currency: CurrencyInput!, minPrice: MoneyInput, maxPrice: MoneyInput): StoneRecommendationsResponse!
}

union RingBuilderFragment = RingBuilderMountFragment | RingBuilderCentreStoneFragment

type RingBuilderMountFragment {
  ring: CatalogueEngagementRing
  signatureStone: CatalogueEngagementRingSignatureStone
  totalSalePrice(region: RegionCode!, currency: CurrencyInput!): Money!
}

type RingBuilderCentreStoneFragment {
  stone: RingBuilderCentreStone
  totalSalePrice(region: RegionCode!, currency: CurrencyInput!): Money!
}

union RingBuilderCentreStone = NonSkuGemstone | NonSkuLabGrown | GemsApiStone

type MarketingDataResponse {
  success: Boolean!
}

input MarketingDataInput {
  ftUtm: UtmInput!
  ltUtm: UtmInput!
  clientId: String
  sessionId: String
  gclid: String
  fbp: String
  fbclid: String
  ftSetTime: DateTime
}

input UtmInput {
  source: String!
  medium: String!
  campaign: String
}

type SearchEverywhereResponse {
  products: [DesignStudioProductGeneric!]!
  customers: [Customer!]!
  orders: [Order!]!
}